package com.webank.databrain.contracts;

import org.fisco.bcos.sdk.v3.client.Client;
import org.fisco.bcos.sdk.v3.codec.abi.FunctionEncoder;
import org.fisco.bcos.sdk.v3.codec.datatypes.*;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.Bytes32;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint256;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint8;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.tuples.generated.Tuple1;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.tuples.generated.Tuple2;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.tuples.generated.Tuple3;
import org.fisco.bcos.sdk.v3.contract.Contract;
import org.fisco.bcos.sdk.v3.crypto.CryptoSuite;
import org.fisco.bcos.sdk.v3.crypto.keypair.CryptoKeyPair;
import org.fisco.bcos.sdk.v3.model.CryptoType;
import org.fisco.bcos.sdk.v3.model.TransactionReceipt;
import org.fisco.bcos.sdk.v3.model.callback.TransactionCallback;
import org.fisco.bcos.sdk.v3.transaction.model.exception.ContractException;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;

@SuppressWarnings("unchecked")
public class DataSchemaModule extends Contract {
    public static final String[] BINARY_ARRAY = {"","909150610e375760405162461bcd60e51b815260206004820152601760248201527619185d18481cd8da195b58481b9bdd08195e1a5cdd1959604a1b604482015260640161020e565b600554604051632e3a17fb60e21b81523360048201526000916001600160a01b03169063b8e85fec9060240160a060405180830381865afa158015610e80573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ea491906115cb565b6001830154815191925014610eee5760405162461bcd60e51b815260206004820152601060248201526f31b0b63632b9103737ba1037bbb732b960811b604482015260640161020e565b81548383556000818152600760205260408120610f0a916111d7565b6000848152600760205260409020610f23908787611295565b507f391516694085d22c8e5b180791c562c043483c8c7b05bcfbe2dc07e987784b8c868686604051610f57939291906117ab565b60405180910390a1505050505050565b6001600160a01b03811660009081526020819052604090205460ff166103d15760405162461bcd60e51b815260206004820152601360248201527223b7bb1d1024b73b30b634b21031b0b63632b960691b604482015260640161020e565b60008585858585604051602001610fe09594939291906117cf565b60408051601f1981840301815291905280516020909101209050600080828152600360205260409020600490810154610100900460ff16908111156110275761102761131e565b146110745760405162461bcd60e51b815260206004820152601960248201527f5472616e73616374696f6e20616c726561647920657869737400000000000000604482015260640161020e565b60006040518060c00160405280886001600160a01b03168152602001876001600160a01b0316815260200186815260200185858080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920182905250938552505050602082015260400160019052600083815260036020818152604092839020845181546001600160a01b039182166001600160a01b031991821617835583870151600184018054919093169116179055928401516002840155606084015180519495508594611152938501929190910190611211565b5060808201516004808301805460ff90931660ff1984168117825560a086015193919261ffff1990921617906101009084908111156111935761119361131e565b0217905550506040518381527f2d231481d8c1af3958a30a257e93e0df6b089bc07ebedc0a86e7355d1aaf1338915060200160405180910390a15095945050505050565b5080546111e3906116c1565b6000825580601f106111f3575050565b601f0160209004906000526020600020908101906103d19190611309565b82805461121d906116c1565b90600052602060002090601f01602090048101928261123f5760008555611285565b82601f1061125857805160ff1916838001178555611285565b82800160010185558215611285579182015b8281111561128557825182559160200191906001019061126a565b50611291929150611309565b5090565b8280546112a1906116c1565b90600052602060002090601f0160209004810192826112c35760008555611285565b82601f106112dc5782800160ff19823516178555611285565b82800160010185558215611285579182015b828111156112855782358255916020019190600101906112ee565b5b80821115611291576000815560010161130a565b634e487b7160e01b600052602160045260246000fd5b602081016002831061135657634e487b7160e01b600052602160045260246000fd5b91905290565b60006020828403121561136e57600080fd5b5035919050565b6001600160a01b03811681146103d157600080fd5b60006020828403121561139c57600080fd5b81356113a781611375565b9392505050565b60008083601f8401126113c057600080fd5b50813567ffffffffffffffff8111156113d857600080fd5b6020830191508360208285010111156113f057600080fd5b9250929050565b6000806020838503121561140a57600080fd5b823567ffffffffffffffff81111561142157600080fd5b61142d858286016113ae565b90969095509350505050565b6000806000806060858703121561144f57600080fd5b843561145a81611375565b935060208501359250604085013567ffffffffffffffff81111561147d57600080fd5b611489878288016113ae565b95989497509550505050565b60005b838110156114b0578181015183820152602001611498565b838111156114bf576000848401525b50505050565b600081518084526114dd816020860160208601611495565b601f01601f19169290920160200192915050565b6020815260006113a760208301846114c5565b600281106103d157600080fd5b60006020828403121561152357600080fd5b81356113a781611504565b60008060006040848603121561154357600080fd5b833567ffffffffffffffff81111561155a57600080fd5b611566868287016113ae565b909790965060209590950135949350505050565b634e487b7160e01b600052601160045260246000fd5b60006000198214156115a4576115a461157a565b5060010190565b8183823760009101908152919050565b80516115c681611504565b919050565b600060a082840312156115dd57600080fd5b60405160a0810181811067ffffffffffffffff8211171561160e57634e487b7160e01b600052604160045260246000fd5b60405282518152602083015161162381611375565b602082015260408301516004811061163a57600080fd5b604082015261164b606084016115bb565b6060820152608083015160808201528091505092915050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6020815260006116a1602083018486611664565b949350505050565b600082198211156116bc576116bc61157a565b500190565b600181811c908216806116d557607f821691505b602082108114156116f657634e487b7160e01b600052602260045260246000fd5b50919050565b6000825161170e818460208701611495565b9190910192915050565b60608152600061172b60608301866114c5565b6020830194909452506001600160a01b0391909116604090910152919050565b600060ff821660ff8114156117625761176261157a565b60010192915050565b600060ff821660ff84168160ff048111821515161561178c5761178c61157a565b029392505050565b6000816117a3576117a361157a565b506000190190565b6040815260006117bf604083018587611664565b9050826020830152949350505050565b60006bffffffffffffffffffffffff19808860601b168352808760601b1660148401525084602883015282846048840137506000910160480190815294935050505056fea264697066735822122062ee230a1934dd96bf6a7094cc450a7278f8220c51246f8270c430c25e9da00f64736f6c634300080b0033"};

    public static final String BINARY = org.fisco.bcos.sdk.v3.utils.StringUtils.joinAll("", BINARY_ARRAY);

    public static final String[] SM_BINARY_ARRAY = {"","1f19601f82011682018060405250810190610e0991906115d9565b6001830154815191925014610e5457604051636381e58960e11b815260206004820152601060248201526f31b0b63632b9103737ba1037bbb732b960811b60448201526064016101f3565b81546000818152600760205260408120610e6d916111e5565b7fdf6b10bddc4a0de24e5afea653ba3c9d89a5966d656f71b3c1bede6af12385688585604051610e9e9291906117c1565b60405180910390a15050505050565b610eb633610f73565b60008181526003602052604090206001600482810154610100900460ff1690811115610ee457610ee4611456565b14610f3257604051636381e58960e11b815260206004820152601a60248201527f496e76616c6964207472616e73616374696f6e2073746174757300000000000060448201526064016101f3565b60048101805461ff0019166104001790556040518281527f5058486f68922f5def2ddcf51515b2db34dd9fb76d56609ba4375a8271475aef90602001610b31565b6001600160a01b03811660009081526020819052604090205460ff1661030257604051636381e58960e11b815260206004820152601360248201527223b7bb1d1024b73b30b634b21031b0b63632b960691b60448201526064016101f3565b60008585858585604051602001610fed9594939291906117dd565b60408051601f1981840301815291905280516020909101209050600080828152600360205260409020600490810154610100900460ff169081111561103457611034611456565b1461108257604051636381e58960e11b815260206004820152601960248201527f5472616e73616374696f6e20616c72656164792065786973740000000000000060448201526064016101f3565b60006040518060c00160405280886001600160a01b03168152602001876001600160a01b0316815260200186815260200185858080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920182905250938552505050602082015260400160019052600083815260036020818152604092839020845181546001600160a01b039182166001600160a01b0319918216178355838701516001840180549190931691161790559284015160028401556060840151805194955085946111609385019291909101906112a3565b5060808201516004808301805460ff90931660ff1984168117825560a086015193919261ffff1990921617906101009084908111156111a1576111a1611456565b0217905550506040518381527f24ba2a097b8583ceb85c849bc3906addc9c36dddfa40b96449fb65f70b549aca915060200160405180910390a15095945050505050565b5080546111f1906116d7565b6000825580601f10611201575050565b601f0160209004906000526020600020908101906103029190611317565b82805461122b906116d7565b90600052602060002090601f01602090048101928261124d5760008555611293565b82601f106112665782800160ff19823516178555611293565b82800160010185558215611293579182015b82811115611293578235825591602001919060010190611278565b5061129f929150611317565b5090565b8280546112af906116d7565b90600052602060002090601f0160209004810192826112d15760008555611293565b82601f106112ea57805160ff1916838001178555611293565b82800160010185558215611293579182015b828111156112935782518255916020019190600101906112fc565b5b8082111561129f5760008155600101611318565b6001600160a01b038116811461030257600080fd5b60006020828403121561135357600080fd5b813561135e8161132c565b9392505050565b60008083601f84011261137757600080fd5b50813567ffffffffffffffff81111561138f57600080fd5b6020830191508360208285010111156113a757600080fd5b9250929050565b6000806000604084860312156113c357600080fd5b833567ffffffffffffffff8111156113da57600080fd5b6113e686828701611365565b909790965060209590950135949350505050565b6000806000806060858703121561141057600080fd5b843561141b8161132c565b935060208501359250604085013567ffffffffffffffff81111561143e57600080fd5b61144a87828801611365565b95989497509550505050565b63b95aa35560e01b600052602160045260246000fd5b602081016002831061148e5763b95aa35560e01b600052602160045260246000fd5b91905290565b6000602082840312156114a657600080fd5b5035919050565b60005b838110156114c85781810151838201526020016114b0565b838111156114d7576000848401525b50505050565b600081518084526114f58160208601602086016114ad565b601f01601f19169290920160200192915050565b60208152600061135e60208301846114dd565b6002811061030257600080fd5b60006020828403121561153b57600080fd5b813561135e8161151c565b6000806020838503121561155957600080fd5b823567ffffffffffffffff81111561157057600080fd5b61157c85828601611365565b90969095509350505050565b63b95aa35560e01b600052601160045260246000fd5b60006000198214156115b2576115b2611588565b5060010190565b8183823760009101908152919050565b80516115d48161151c565b919050565b600060a082840312156115eb57600080fd5b60405160a0810181811067ffffffffffffffff8211171561161c5763b95aa35560e01b600052604160045260246000fd5b6040528251815260208301516116318161132c565b602082015260408301516004811061164857600080fd5b6040820152611659606084016115c9565b6060820152608083015160808201528091505092915050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6040815260006116af604083018587611672565b9050826020830152949350505050565b600082198211156116d2576116d2611588565b500190565b600181811c908216806116eb57607f821691505b6020821081141561170c5763b95aa35560e01b600052602260045260246000fd5b50919050565b600082516117248184602087016114ad565b9190910192915050565b60608152600061174160608301866114dd565b6020830194909452506001600160a01b0391909116604090910152919050565b600060ff821660ff81141561177857611778611588565b60010192915050565b600060ff821660ff84168160ff04811182151516156117a2576117a2611588565b029392505050565b6000816117b9576117b9611588565b506000190190565b6020815260006117d5602083018486611672565b949350505050565b60006bffffffffffffffffffffffff19808860601b168352808760601b1660148401525084602883015282846048840137506000910160480190815294935050505056fea264697066735822122020a5a36c09d74e3db50a488763d4368c1fb55873a1f40ca6ff91bc12b6aa1bda64736f6c634300080b0033"};

    public static final String SM_BINARY = org.fisco.bcos.sdk.v3.utils.StringUtils.joinAll("", SM_BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"accountContract\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"DataSchemaAlreadyExisted\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"dataSchemaId\",\"type\":\"bytes\"}],\"name\":\"DataSchemaNotExisted\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"proposalId\",\"type\":\"bytes32\"}],\"name\":\"CancelProposal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"dataSchemaId\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"}],\"name\":\"CreateDataSchema\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"proposalId\",\"type\":\"bytes32\"}],\"name\":\"CreateProposal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"dataSchemaId\",\"type\":\"bytes\"}],\"name\":\"DeleteDataSchema\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"proposalId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"name\":\"ExecuteProposal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"dataSchemaId\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"ModifyDataSchema\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"proposalId\",\"type\":\"bytes32\"}],\"name\":\"VoteProposal\",\"type\":\"event\"},{\"conflictFields\":[{\"kind\":0},{\"kind\":2,\"slot\":0,\"value\":[0]},{\"kind\":2,\"slot\":4,\"value\":[0]},{\"kind\":4,\"value\":[1]},{\"kind\":4,\"value\":[2]}],\"inputs\":[{\"internalType\":\"address\",\"name\":\"governor\",\"type\":\"address\"}],\"name\":\"addGovernor\",\"outputs\":[],\"selector\":[1011492304,224856489],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":2,\"slot\":0,\"value\":[0]},{\"kind\":3,\"slot\":3,\"value\":[0]}],\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"proposalId\",\"type\":\"bytes32\"}],\"name\":\"cancelProposal\",\"outputs\":[],\"selector\":[926379176,2940694586],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":0},{\"kind\":2,\"slot\":0,\"value\":[0]},{\"kind\":2,\"slot\":4,\"value\":[0]},{\"kind\":4,\"value\":[2]}],\"inputs\":[{\"internalType\":\"enum GovernModule.GovernMode\",\"name\":\"newMode\",\"type\":\"uint8\"}],\"name\":\"changeMode\",\"outputs\":[],\"selector\":[2775083046,1774458637],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":0}],\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"createDataSchema\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"dataSchemaId\",\"type\":\"bytes\"}],\"selector\":[1467847343,1536710958],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":0},{\"kind\":2,\"slot\":0,\"value\":[0]},{\"kind\":2,\"slot\":4,\"value\":[0]}],\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"createProposal\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"proposalId\",\"type\":\"bytes32\"}],\"selector\":[1357615905,959028584],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":0}],\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"dataSchemaId\",\"type\":\"bytes\"}],\"name\":\"deleteDataSchema\",\"outputs\":[],\"selector\":[1017255937,2640605595],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":4,\"value\":[2]}],\"inputs\":[],\"name\":\"mode\",\"outputs\":[{\"internalType\":\"enum GovernModule.GovernMode\",\"name\":\"\",\"type\":\"uint8\"}],\"selector\":[693785106,1032774748],\"stateMutability\":\"view\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":0}],\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"dataSchemaId\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"modifyDataSchema\",\"outputs\":[],\"selector\":[4135916534,614828051],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":0},{\"kind\":2,\"slot\":0,\"value\":[0]},{\"kind\":2,\"slot\":4,\"value\":[0]},{\"kind\":4,\"value\":[1]},{\"kind\":4,\"value\":[2]}],\"inputs\":[{\"internalType\":\"address\",\"name\":\"governor\",\"type\":\"address\"}],\"name\":\"removeGovernor\",\"outputs\":[],\"selector\":[4006456456,2398553536],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":0}],\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"proposalId\",\"type\":\"bytes32\"}],\"name\":\"vote\",\"outputs\":[],\"selector\":[2795236026,1620399368],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"};

    public static final String ABI = org.fisco.bcos.sdk.v3.utils.StringUtils.joinAll("", ABI_ARRAY);

    public static final String FUNC_ADDGOVERNOR = "addGovernor";

    public static final String FUNC_CANCELPROPOSAL = "cancelProposal";

    public static final String FUNC_CHANGEMODE = "changeMode";

    public static final String FUNC_CREATEDATASCHEMA = "createDataSchema";

    public static final String FUNC_CREATEPROPOSAL = "createProposal";

    public static final String FUNC_DELETEDATASCHEMA = "deleteDataSchema";

    public static final String FUNC_MODE = "mode";

    public static final String FUNC_MODIFYDATASCHEMA = "modifyDataSchema";

    public static final String FUNC_REMOVEGOVERNOR = "removeGovernor";

    public static final String FUNC_VOTE = "vote";

    public static final Event CANCELPROPOSAL_EVENT = new Event("CancelProposal", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
    ;

    public static final Event CREATEDATASCHEMA_EVENT = new Event("CreateDataSchema", 
            Arrays.<TypeReference<?>>asList(new TypeReference<DynamicBytes>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}));
    ;

    public static final Event CREATEPROPOSAL_EVENT = new Event("CreateProposal", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
    ;

    public static final Event DELETEDATASCHEMA_EVENT = new Event("DeleteDataSchema", 
            Arrays.<TypeReference<?>>asList(new TypeReference<DynamicBytes>() {}));
    ;

    public static final Event EXECUTEPROPOSAL_EVENT = new Event("ExecuteProposal", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Bool>() {}));
    ;

    public static final Event MODIFYDATASCHEMA_EVENT = new Event("ModifyDataSchema", 
            Arrays.<TypeReference<?>>asList(new TypeReference<DynamicBytes>() {}, new TypeReference<Bytes32>() {}));
    ;

    public static final Event VOTEPROPOSAL_EVENT = new Event("VoteProposal", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
    ;

    protected DataSchemaModule(String contractAddress, Client client, CryptoKeyPair credential) {
        super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
    }

    public static String getBinary(CryptoSuite cryptoSuite) {
        return (cryptoSuite.getCryptoTypeConfig() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public static String getABI() {
        return ABI;
    }

    public List<CancelProposalEventResponse> getCancelProposalEvents(
            TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(CANCELPROPOSAL_EVENT, transactionReceipt);
        ArrayList<CancelProposalEventResponse> responses = new ArrayList<CancelProposalEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            CancelProposalEventResponse typedResponse = new CancelProposalEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.proposalId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public List<CreateDataSchemaEventResponse> getCreateDataSchemaEvents(
            TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(CREATEDATASCHEMA_EVENT, transactionReceipt);
        ArrayList<CreateDataSchemaEventResponse> responses = new ArrayList<CreateDataSchemaEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            CreateDataSchemaEventResponse typedResponse = new CreateDataSchemaEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.dataSchemaId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.hash = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.manager = (String) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public List<CreateProposalEventResponse> getCreateProposalEvents(
            TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(CREATEPROPOSAL_EVENT, transactionReceipt);
        ArrayList<CreateProposalEventResponse> responses = new ArrayList<CreateProposalEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            CreateProposalEventResponse typedResponse = new CreateProposalEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.proposalId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public List<DeleteDataSchemaEventResponse> getDeleteDataSchemaEvents(
            TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(DELETEDATASCHEMA_EVENT, transactionReceipt);
        ArrayList<DeleteDataSchemaEventResponse> responses = new ArrayList<DeleteDataSchemaEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            DeleteDataSchemaEventResponse typedResponse = new DeleteDataSchemaEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.dataSchemaId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public List<ExecuteProposalEventResponse> getExecuteProposalEvents(
            TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(EXECUTEPROPOSAL_EVENT, transactionReceipt);
        ArrayList<ExecuteProposalEventResponse> responses = new ArrayList<ExecuteProposalEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            ExecuteProposalEventResponse typedResponse = new ExecuteProposalEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.proposalId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.success = (Boolean) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public List<ModifyDataSchemaEventResponse> getModifyDataSchemaEvents(
            TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(MODIFYDATASCHEMA_EVENT, transactionReceipt);
        ArrayList<ModifyDataSchemaEventResponse> responses = new ArrayList<ModifyDataSchemaEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            ModifyDataSchemaEventResponse typedResponse = new ModifyDataSchemaEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.dataSchemaId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.hash = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public List<VoteProposalEventResponse> getVoteProposalEvents(
            TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(VOTEPROPOSAL_EVENT, transactionReceipt);
        ArrayList<VoteProposalEventResponse> responses = new ArrayList<VoteProposalEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            VoteProposalEventResponse typedResponse = new VoteProposalEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.proposalId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public TransactionReceipt addGovernor(String governor) {
        final Function function = new Function(
                FUNC_ADDGOVERNOR, 
                Arrays.<Type>asList(new Address(governor)),
                Collections.<TypeReference<?>>emptyList(), 0);
        return executeTransaction(function);
    }

    public String addGovernor(String governor, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_ADDGOVERNOR, 
                Arrays.<Type>asList(new Address(governor)),
                Collections.<TypeReference<?>>emptyList(), 0);
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForAddGovernor(String governor) {
        final Function function = new Function(
                FUNC_ADDGOVERNOR, 
                Arrays.<Type>asList(new Address(governor)),
                Collections.<TypeReference<?>>emptyList(), 0);
        return createSignedTransaction(function);
    }

    public Tuple1<String> getAddGovernorInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_ADDGOVERNOR, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public TransactionReceipt cancelProposal(byte[] proposalId) {
        final Function function = new Function(
                FUNC_CANCELPROPOSAL, 
                Arrays.<Type>asList(new Bytes32(proposalId)),
                Collections.<TypeReference<?>>emptyList(), 4);
        return executeTransaction(function);
    }

    public String cancelProposal(byte[] proposalId, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_CANCELPROPOSAL, 
                Arrays.<Type>asList(new Bytes32(proposalId)),
                Collections.<TypeReference<?>>emptyList(), 4);
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForCancelProposal(byte[] proposalId) {
        final Function function = new Function(
                FUNC_CANCELPROPOSAL, 
                Arrays.<Type>asList(new Bytes32(proposalId)),
                Collections.<TypeReference<?>>emptyList(), 4);
        return createSignedTransaction(function);
    }

    public Tuple1<byte[]> getCancelProposalInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_CANCELPROPOSAL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<byte[]>(

                (byte[]) results.get(0).getValue()
                );
    }

    public TransactionReceipt changeMode(BigInteger newMode) {
        final Function function = new Function(
                FUNC_CHANGEMODE, 
                Arrays.<Type>asList(new Uint8(newMode)),
                Collections.<TypeReference<?>>emptyList(), 0);
        return executeTransaction(function);
    }

    public String changeMode(BigInteger newMode, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_CHANGEMODE, 
                Arrays.<Type>asList(new Uint8(newMode)),
                Collections.<TypeReference<?>>emptyList(), 0);
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForChangeMode(BigInteger newMode) {
        final Function function = new Function(
                FUNC_CHANGEMODE, 
                Arrays.<Type>asList(new Uint8(newMode)),
                Collections.<TypeReference<?>>emptyList(), 0);
        return createSignedTransaction(function);
    }

    public Tuple1<BigInteger> getChangeModeInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_CHANGEMODE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public TransactionReceipt createDataSchema(byte[] hash) {
        final Function function = new Function(
                FUNC_CREATEDATASCHEMA, 
                Arrays.<Type>asList(new Bytes32(hash)),
                Collections.<TypeReference<?>>emptyList(), 0);
        return executeTransaction(function);
    }

    public String createDataSchema(byte[] hash, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_CREATEDATASCHEMA, 
                Arrays.<Type>asList(new Bytes32(hash)),
                Collections.<TypeReference<?>>emptyList(), 0);
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForCreateDataSchema(byte[] hash) {
        final Function function = new Function(
                FUNC_CREATEDATASCHEMA, 
                Arrays.<Type>asList(new Bytes32(hash)),
                Collections.<TypeReference<?>>emptyList(), 0);
        return createSignedTransaction(function);
    }

    public Tuple1<byte[]> getCreateDataSchemaInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_CREATEDATASCHEMA, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<byte[]>(

                (byte[]) results.get(0).getValue()
                );
    }

    public Tuple1<byte[]> getCreateDataSchemaOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_CREATEDATASCHEMA, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicBytes>() {}));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<byte[]>(

                (byte[]) results.get(0).getValue()
                );
    }

    public TransactionReceipt createProposal(String to, BigInteger nonce, byte[] data) {
        final Function function = new Function(
                FUNC_CREATEPROPOSAL, 
                Arrays.<Type>asList(new Address(to),
                new Uint256(nonce),
                new DynamicBytes(data)),
                Collections.<TypeReference<?>>emptyList(), 0);
        return executeTransaction(function);
    }

    public String createProposal(String to, BigInteger nonce, byte[] data,
            TransactionCallback callback) {
        final Function function = new Function(
                FUNC_CREATEPROPOSAL, 
                Arrays.<Type>asList(new Address(to),
                new Uint256(nonce),
                new DynamicBytes(data)),
                Collections.<TypeReference<?>>emptyList(), 0);
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForCreateProposal(String to, BigInteger nonce, byte[] data) {
        final Function function = new Function(
                FUNC_CREATEPROPOSAL, 
                Arrays.<Type>asList(new Address(to),
                new Uint256(nonce),
                new DynamicBytes(data)),
                Collections.<TypeReference<?>>emptyList(), 0);
        return createSignedTransaction(function);
    }

    public Tuple3<String, BigInteger, byte[]> getCreateProposalInput(
            TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_CREATEPROPOSAL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<DynamicBytes>() {}));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, BigInteger, byte[]>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue(), 
                (byte[]) results.get(2).getValue()
                );
    }

    public Tuple1<byte[]> getCreateProposalOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_CREATEPROPOSAL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<byte[]>(

                (byte[]) results.get(0).getValue()
                );
    }

    public TransactionReceipt deleteDataSchema(byte[] dataSchemaId) {
        final Function function = new Function(
                FUNC_DELETEDATASCHEMA, 
                Arrays.<Type>asList(new DynamicBytes(dataSchemaId)),
                Collections.<TypeReference<?>>emptyList(), 0);
        return executeTransaction(function);
    }

    public String deleteDataSchema(byte[] dataSchemaId, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_DELETEDATASCHEMA, 
                Arrays.<Type>asList(new DynamicBytes(dataSchemaId)),
                Collections.<TypeReference<?>>emptyList(), 0);
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForDeleteDataSchema(byte[] dataSchemaId) {
        final Function function = new Function(
                FUNC_DELETEDATASCHEMA, 
                Arrays.<Type>asList(new DynamicBytes(dataSchemaId)),
                Collections.<TypeReference<?>>emptyList(), 0);
        return createSignedTransaction(function);
    }

    public Tuple1<byte[]> getDeleteDataSchemaInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_DELETEDATASCHEMA, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicBytes>() {}));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<byte[]>(

                (byte[]) results.get(0).getValue()
                );
    }

    public BigInteger mode() throws ContractException {
        final Function function = new Function(FUNC_MODE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public TransactionReceipt modifyDataSchema(byte[] dataSchemaId, byte[] hash) {
        final Function function = new Function(
                FUNC_MODIFYDATASCHEMA, 
                Arrays.<Type>asList(new DynamicBytes(dataSchemaId),
                new Bytes32(hash)),
                Collections.<TypeReference<?>>emptyList(), 0);
        return executeTransaction(function);
    }

    public String modifyDataSchema(byte[] dataSchemaId, byte[] hash, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_MODIFYDATASCHEMA, 
                Arrays.<Type>asList(new DynamicBytes(dataSchemaId),
                new Bytes32(hash)),
                Collections.<TypeReference<?>>emptyList(), 0);
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForModifyDataSchema(byte[] dataSchemaId, byte[] hash) {
        final Function function = new Function(
                FUNC_MODIFYDATASCHEMA, 
                Arrays.<Type>asList(new DynamicBytes(dataSchemaId),
                new Bytes32(hash)),
                Collections.<TypeReference<?>>emptyList(), 0);
        return createSignedTransaction(function);
    }

    public Tuple2<byte[], byte[]> getModifyDataSchemaInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_MODIFYDATASCHEMA, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicBytes>() {}, new TypeReference<Bytes32>() {}));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<byte[], byte[]>(

                (byte[]) results.get(0).getValue(), 
                (byte[]) results.get(1).getValue()
                );
    }

    public TransactionReceipt removeGovernor(String governor) {
        final Function function = new Function(
                FUNC_REMOVEGOVERNOR, 
                Arrays.<Type>asList(new Address(governor)),
                Collections.<TypeReference<?>>emptyList(), 0);
        return executeTransaction(function);
    }

    public String removeGovernor(String governor, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_REMOVEGOVERNOR, 
                Arrays.<Type>asList(new Address(governor)),
                Collections.<TypeReference<?>>emptyList(), 0);
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForRemoveGovernor(String governor) {
        final Function function = new Function(
                FUNC_REMOVEGOVERNOR, 
                Arrays.<Type>asList(new Address(governor)),
                Collections.<TypeReference<?>>emptyList(), 0);
        return createSignedTransaction(function);
    }

    public Tuple1<String> getRemoveGovernorInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_REMOVEGOVERNOR, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public TransactionReceipt vote(byte[] proposalId) {
        final Function function = new Function(
                FUNC_VOTE, 
                Arrays.<Type>asList(new Bytes32(proposalId)),
                Collections.<TypeReference<?>>emptyList(), 0);
        return executeTransaction(function);
    }

    public String vote(byte[] proposalId, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_VOTE, 
                Arrays.<Type>asList(new Bytes32(proposalId)),
                Collections.<TypeReference<?>>emptyList(), 0);
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForVote(byte[] proposalId) {
        final Function function = new Function(
                FUNC_VOTE, 
                Arrays.<Type>asList(new Bytes32(proposalId)),
                Collections.<TypeReference<?>>emptyList(), 0);
        return createSignedTransaction(function);
    }

    public Tuple1<byte[]> getVoteInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_VOTE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<byte[]>(

                (byte[]) results.get(0).getValue()
                );
    }

    public static DataSchemaModule load(String contractAddress, Client client,
            CryptoKeyPair credential) {
        return new DataSchemaModule(contractAddress, client, credential);
    }

    public static DataSchemaModule deploy(Client client, CryptoKeyPair credential, String _governor,
            String accountContract) throws ContractException {
        byte[] encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new Address(_governor),
                new Address(accountContract)));
        return deploy(DataSchemaModule.class, client, credential, getBinary(client.getCryptoSuite()), getABI(), encodedConstructor, null);
    }

    public static class CancelProposalEventResponse {
        public TransactionReceipt.Logs log;

        public byte[] proposalId;
    }

    public static class CreateDataSchemaEventResponse {
        public TransactionReceipt.Logs log;

        public byte[] dataSchemaId;

        public byte[] hash;

        public String manager;
    }

    public static class CreateProposalEventResponse {
        public TransactionReceipt.Logs log;

        public byte[] proposalId;
    }

    public static class DeleteDataSchemaEventResponse {
        public TransactionReceipt.Logs log;

        public byte[] dataSchemaId;
    }

    public static class ExecuteProposalEventResponse {
        public TransactionReceipt.Logs log;

        public byte[] proposalId;

        public Boolean success;
    }

    public static class ModifyDataSchemaEventResponse {
        public TransactionReceipt.Logs log;

        public byte[] dataSchemaId;

        public byte[] hash;
    }

    public static class VoteProposalEventResponse {
        public TransactionReceipt.Logs log;

        public byte[] proposalId;
    }
}
