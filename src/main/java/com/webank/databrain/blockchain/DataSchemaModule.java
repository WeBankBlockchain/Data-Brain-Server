package com.webank.databrain.blockchain;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.fisco.bcos.sdk.v3.client.Client;
import org.fisco.bcos.sdk.v3.codec.abi.FunctionEncoder;
import org.fisco.bcos.sdk.v3.codec.datatypes.Address;
import org.fisco.bcos.sdk.v3.codec.datatypes.Bool;
import org.fisco.bcos.sdk.v3.codec.datatypes.DynamicBytes;
import org.fisco.bcos.sdk.v3.codec.datatypes.Event;
import org.fisco.bcos.sdk.v3.codec.datatypes.Function;
import org.fisco.bcos.sdk.v3.codec.datatypes.Type;
import org.fisco.bcos.sdk.v3.codec.datatypes.TypeReference;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.Bytes32;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint256;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint8;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.tuples.generated.Tuple1;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.tuples.generated.Tuple2;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.tuples.generated.Tuple3;
import org.fisco.bcos.sdk.v3.contract.Contract;
import org.fisco.bcos.sdk.v3.crypto.CryptoSuite;
import org.fisco.bcos.sdk.v3.crypto.keypair.CryptoKeyPair;
import org.fisco.bcos.sdk.v3.model.CryptoType;
import org.fisco.bcos.sdk.v3.model.TransactionReceipt;
import org.fisco.bcos.sdk.v3.model.callback.TransactionCallback;
import org.fisco.bcos.sdk.v3.transaction.model.exception.ContractException;

@SuppressWarnings("unchecked")
public class DataSchemaModule extends Contract {
    public static final String[] BINARY_ARRAY = {"","10bf565b6000848152600760205260409020610e0b90878761117d565b507f391516694085d22c8e5b180791c562c043483c8c7b05bcfbe2dc07e987784b8c868686604051610e3f93929190611693565b60405180910390a1505050505050565b6001600160a01b03811660009081526020819052604090205460ff166103d15760405162461bcd60e51b815260206004820152601360248201527223b7bb1d1024b73b30b634b21031b0b63632b960691b604482015260640161020e565b60008585858585604051602001610ec89594939291906116b7565b60408051601f1981840301815291905280516020909101209050600080828152600360205260409020600490810154610100900460ff1690811115610f0f57610f0f611206565b14610f5c5760405162461bcd60e51b815260206004820152601960248201527f5472616e73616374696f6e20616c726561647920657869737400000000000000604482015260640161020e565b60006040518060c00160405280886001600160a01b03168152602001876001600160a01b0316815260200186815260200185858080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920182905250938552505050602082015260400160019052600083815260036020818152604092839020845181546001600160a01b039182166001600160a01b03199182161783558387015160018401805491909316911617905592840151600284015560608401518051949550859461103a9385019291909101906110f9565b5060808201516004808301805460ff90931660ff1984168117825560a086015193919261ffff19909216179061010090849081111561107b5761107b611206565b0217905550506040518381527f2d231481d8c1af3958a30a257e93e0df6b089bc07ebedc0a86e7355d1aaf1338915060200160405180910390a15095945050505050565b5080546110cb906115a9565b6000825580601f106110db575050565b601f0160209004906000526020600020908101906103d191906111f1565b828054611105906115a9565b90600052602060002090601f016020900481019282611127576000855561116d565b82601f1061114057805160ff191683800117855561116d565b8280016001018555821561116d579182015b8281111561116d578251825591602001919060010190611152565b506111799291506111f1565b5090565b828054611189906115a9565b90600052602060002090601f0160209004810192826111ab576000855561116d565b82601f106111c45782800160ff1982351617855561116d565b8280016001018555821561116d579182015b8281111561116d5782358255916020019190600101906111d6565b5b8082111561117957600081556001016111f2565b634e487b7160e01b600052602160045260246000fd5b602081016002831061123e57634e487b7160e01b600052602160045260246000fd5b91905290565b60006020828403121561125657600080fd5b5035919050565b6001600160a01b03811681146103d157600080fd5b60006020828403121561128457600080fd5b813561128f8161125d565b9392505050565b60008083601f8401126112a857600080fd5b50813567ffffffffffffffff8111156112c057600080fd5b6020830191508360208285010111156112d857600080fd5b9250929050565b600080602083850312156112f257600080fd5b823567ffffffffffffffff81111561130957600080fd5b61131585828601611296565b90969095509350505050565b6000806000806060858703121561133757600080fd5b84356113428161125d565b935060208501359250604085013567ffffffffffffffff81111561136557600080fd5b61137187828801611296565b95989497509550505050565b60005b83811015611398578181015183820152602001611380565b838111156113a7576000848401525b50505050565b600081518084526113c581602086016020860161137d565b601f01601f19169290920160200192915050565b60208152600061128f60208301846113ad565b600281106103d157600080fd5b60006020828403121561140b57600080fd5b813561128f816113ec565b60008060006040848603121561142b57600080fd5b833567ffffffffffffffff81111561144257600080fd5b61144e86828701611296565b909790965060209590950135949350505050565b634e487b7160e01b600052601160045260246000fd5b600060001982141561148c5761148c611462565b5060010190565b8183823760009101908152919050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6020815260006114e06020830184866114a3565b949350505050565b80516114f3816113ec565b919050565b600060a0828403121561150a57600080fd5b60405160a0810181811067ffffffffffffffff8211171561153b57634e487b7160e01b600052604160045260246000fd5b6040528251815260208301516115508161125d565b602082015260408301516004811061156757600080fd5b6040820152611578606084016114e8565b6060820152608083015160808201528091505092915050565b600082198211156115a4576115a4611462565b500190565b600181811c908216806115bd57607f821691505b602082108114156115de57634e487b7160e01b600052602260045260246000fd5b50919050565b600082516115f681846020870161137d565b9190910192915050565b60608152600061161360608301866113ad565b6020830194909452506001600160a01b0391909116604090910152919050565b600060ff821660ff81141561164a5761164a611462565b60010192915050565b600060ff821660ff84168160ff048111821515161561167457611674611462565b029392505050565b60008161168b5761168b611462565b506000190190565b6040815260006116a76040830185876114a3565b9050826020830152949350505050565b60006bffffffffffffffffffffffff19808860601b168352808760601b1660148401525084602883015282846048840137506000910160480190815294935050505056fea2646970667358221220892653f5174374c365798cc081b00ee69ad4d31c9e9d932b44790891bff3264e64736f6c634300080b0033"};

    public static final String BINARY = org.fisco.bcos.sdk.v3.utils.StringUtils.joinAll("", BINARY_ARRAY);

    public static final String[] SM_BINARY_ARRAY = {"","207472616e73616374696f6e2073746174757300000000000060448201526064016101f3565b60048101805461ff0019166104001790556040518281527f5058486f68922f5def2ddcf51515b2db34dd9fb76d56609ba4375a8271475aef90602001610a5c565b6001600160a01b03811660009081526020819052604090205460ff1661030257604051636381e58960e11b815260206004820152601360248201527223b7bb1d1024b73b30b634b21031b0b63632b960691b60448201526064016101f3565b60008585858585604051602001610ecf9594939291906116bf565b60408051601f1981840301815291905280516020909101209050600080828152600360205260409020600490810154610100900460ff1690811115610f1657610f16611338565b14610f6457604051636381e58960e11b815260206004820152601960248201527f5472616e73616374696f6e20616c72656164792065786973740000000000000060448201526064016101f3565b60006040518060c00160405280886001600160a01b03168152602001876001600160a01b0316815260200186815260200185858080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920182905250938552505050602082015260400160019052600083815260036020818152604092839020845181546001600160a01b039182166001600160a01b031991821617835583870151600184018054919093169116179055928401516002840155606084015180519495508594611042938501929190910190611185565b5060808201516004808301805460ff90931660ff1984168117825560a086015193919261ffff19909216179061010090849081111561108357611083611338565b0217905550506040518381527f24ba2a097b8583ceb85c849bc3906addc9c36dddfa40b96449fb65f70b549aca915060200160405180910390a15095945050505050565b5080546110d3906115d5565b6000825580601f106110e3575050565b601f01602090049060005260206000209081019061030291906111f9565b82805461110d906115d5565b90600052602060002090601f01602090048101928261112f5760008555611175565b82601f106111485782800160ff19823516178555611175565b82800160010185558215611175579182015b8281111561117557823582559160200191906001019061115a565b506111819291506111f9565b5090565b828054611191906115d5565b90600052602060002090601f0160209004810192826111b35760008555611175565b82601f106111cc57805160ff1916838001178555611175565b82800160010185558215611175579182015b828111156111755782518255916020019190600101906111de565b5b8082111561118157600081556001016111fa565b6001600160a01b038116811461030257600080fd5b60006020828403121561123557600080fd5b81356112408161120e565b9392505050565b60008083601f84011261125957600080fd5b50813567ffffffffffffffff81111561127157600080fd5b60208301915083602082850101111561128957600080fd5b9250929050565b6000806000604084860312156112a557600080fd5b833567ffffffffffffffff8111156112bc57600080fd5b6112c886828701611247565b909790965060209590950135949350505050565b600080600080606085870312156112f257600080fd5b84356112fd8161120e565b935060208501359250604085013567ffffffffffffffff81111561132057600080fd5b61132c87828801611247565b95989497509550505050565b63b95aa35560e01b600052602160045260246000fd5b60208101600283106113705763b95aa35560e01b600052602160045260246000fd5b91905290565b60006020828403121561138857600080fd5b5035919050565b60005b838110156113aa578181015183820152602001611392565b838111156113b9576000848401525b50505050565b600081518084526113d781602086016020860161138f565b601f01601f19169290920160200192915050565b60208152600061124060208301846113bf565b6002811061030257600080fd5b60006020828403121561141d57600080fd5b8135611240816113fe565b6000806020838503121561143b57600080fd5b823567ffffffffffffffff81111561145257600080fd5b61145e85828601611247565b90969095509350505050565b63b95aa35560e01b600052601160045260246000fd5b60006000198214156114945761149461146a565b5060010190565b8183823760009101908152919050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6020815260006114e86020830184866114ab565b949350505050565b80516114fb816113fe565b919050565b600060a0828403121561151257600080fd5b60405160a0810181811067ffffffffffffffff821117156115435763b95aa35560e01b600052604160045260246000fd5b6040528251815260208301516115588161120e565b602082015260408301516004811061156f57600080fd5b6040820152611580606084016114f0565b6060820152608083015160808201528091505092915050565b6040815260006115ad6040830185876114ab565b9050826020830152949350505050565b600082198211156115d0576115d061146a565b500190565b600181811c908216806115e957607f821691505b6020821081141561160a5763b95aa35560e01b600052602260045260246000fd5b50919050565b6000825161162281846020870161138f565b9190910192915050565b60608152600061163f60608301866113bf565b6020830194909452506001600160a01b0391909116604090910152919050565b600060ff821660ff8114156116765761167661146a565b60010192915050565b600060ff821660ff84168160ff04811182151516156116a0576116a061146a565b029392505050565b6000816116b7576116b761146a565b506000190190565b60006bffffffffffffffffffffffff19808860601b168352808760601b1660148401525084602883015282846048840137506000910160480190815294935050505056fea2646970667358221220a2e42e05c2703b2747acbe5d45e2da316e18027f017b225d56e02b004080720964736f6c634300080b0033"};

    public static final String SM_BINARY = org.fisco.bcos.sdk.v3.utils.StringUtils.joinAll("", SM_BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"accountContract\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"DataSchemaAlreadyExisted\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"dataSchemaId\",\"type\":\"bytes\"}],\"name\":\"DataSchemaNotExisted\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"did\",\"type\":\"bytes32\"}],\"name\":\"InvalidAccountStatus\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidCaller\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidHash\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"proposalId\",\"type\":\"bytes32\"}],\"name\":\"CancelProposal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"dataSchemaId\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"}],\"name\":\"CreateDataSchema\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"proposalId\",\"type\":\"bytes32\"}],\"name\":\"CreateProposal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"dataSchemaId\",\"type\":\"bytes\"}],\"name\":\"DeleteDataSchema\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"proposalId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"name\":\"ExecuteProposal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"dataSchemaId\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"ModifyDataSchema\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"proposalId\",\"type\":\"bytes32\"}],\"name\":\"VoteProposal\",\"type\":\"event\"},{\"conflictFields\":[{\"kind\":0},{\"kind\":2,\"slot\":0,\"value\":[0]},{\"kind\":2,\"slot\":4,\"value\":[0]},{\"kind\":4,\"value\":[1]},{\"kind\":4,\"value\":[2]}],\"inputs\":[{\"internalType\":\"address\",\"name\":\"governor\",\"type\":\"address\"}],\"name\":\"addGovernor\",\"outputs\":[],\"selector\":[1011492304,224856489],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":2,\"slot\":0,\"value\":[0]},{\"kind\":3,\"slot\":3,\"value\":[0]}],\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"proposalId\",\"type\":\"bytes32\"}],\"name\":\"cancelProposal\",\"outputs\":[],\"selector\":[926379176,2940694586],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":0},{\"kind\":2,\"slot\":0,\"value\":[0]},{\"kind\":2,\"slot\":4,\"value\":[0]},{\"kind\":4,\"value\":[2]}],\"inputs\":[{\"internalType\":\"enum GovernModule.GovernMode\",\"name\":\"newMode\",\"type\":\"uint8\"}],\"name\":\"changeMode\",\"outputs\":[],\"selector\":[2775083046,1774458637],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":0}],\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"createDataSchema\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"dataSchemaId\",\"type\":\"bytes\"}],\"selector\":[1467847343,1536710958],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":0},{\"kind\":2,\"slot\":0,\"value\":[0]},{\"kind\":2,\"slot\":4,\"value\":[0]}],\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"createProposal\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"proposalId\",\"type\":\"bytes32\"}],\"selector\":[1357615905,959028584],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":0}],\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"dataSchemaId\",\"type\":\"bytes\"}],\"name\":\"deleteDataSchema\",\"outputs\":[],\"selector\":[1017255937,2640605595],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":4,\"value\":[2]}],\"inputs\":[],\"name\":\"mode\",\"outputs\":[{\"internalType\":\"enum GovernModule.GovernMode\",\"name\":\"\",\"type\":\"uint8\"}],\"selector\":[693785106,1032774748],\"stateMutability\":\"view\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":0}],\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"dataSchemaId\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"modifyDataSchema\",\"outputs\":[],\"selector\":[4135916534,614828051],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":0},{\"kind\":2,\"slot\":0,\"value\":[0]},{\"kind\":2,\"slot\":4,\"value\":[0]},{\"kind\":4,\"value\":[1]},{\"kind\":4,\"value\":[2]}],\"inputs\":[{\"internalType\":\"address\",\"name\":\"governor\",\"type\":\"address\"}],\"name\":\"removeGovernor\",\"outputs\":[],\"selector\":[4006456456,2398553536],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":0}],\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"proposalId\",\"type\":\"bytes32\"}],\"name\":\"vote\",\"outputs\":[],\"selector\":[2795236026,1620399368],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"};

    public static final String ABI = org.fisco.bcos.sdk.v3.utils.StringUtils.joinAll("", ABI_ARRAY);

    public static final String FUNC_ADDGOVERNOR = "addGovernor";

    public static final String FUNC_CANCELPROPOSAL = "cancelProposal";

    public static final String FUNC_CHANGEMODE = "changeMode";

    public static final String FUNC_CREATEDATASCHEMA = "createDataSchema";

    public static final String FUNC_CREATEPROPOSAL = "createProposal";

    public static final String FUNC_DELETEDATASCHEMA = "deleteDataSchema";

    public static final String FUNC_MODE = "mode";

    public static final String FUNC_MODIFYDATASCHEMA = "modifyDataSchema";

    public static final String FUNC_REMOVEGOVERNOR = "removeGovernor";

    public static final String FUNC_VOTE = "vote";

    public static final Event CANCELPROPOSAL_EVENT = new Event("CancelProposal", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
    ;

    public static final Event CREATEDATASCHEMA_EVENT = new Event("CreateDataSchema", 
            Arrays.<TypeReference<?>>asList(new TypeReference<DynamicBytes>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}));
    ;

    public static final Event CREATEPROPOSAL_EVENT = new Event("CreateProposal", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
    ;

    public static final Event DELETEDATASCHEMA_EVENT = new Event("DeleteDataSchema", 
            Arrays.<TypeReference<?>>asList(new TypeReference<DynamicBytes>() {}));
    ;

    public static final Event EXECUTEPROPOSAL_EVENT = new Event("ExecuteProposal", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Bool>() {}));
    ;

    public static final Event MODIFYDATASCHEMA_EVENT = new Event("ModifyDataSchema", 
            Arrays.<TypeReference<?>>asList(new TypeReference<DynamicBytes>() {}, new TypeReference<Bytes32>() {}));
    ;

    public static final Event VOTEPROPOSAL_EVENT = new Event("VoteProposal", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
    ;

    protected DataSchemaModule(String contractAddress, Client client, CryptoKeyPair credential) {
        super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
    }

    public static String getBinary(CryptoSuite cryptoSuite) {
        return (cryptoSuite.getCryptoTypeConfig() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public static String getABI() {
        return ABI;
    }

    public List<CancelProposalEventResponse> getCancelProposalEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(CANCELPROPOSAL_EVENT, transactionReceipt);
        ArrayList<CancelProposalEventResponse> responses = new ArrayList<CancelProposalEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            CancelProposalEventResponse typedResponse = new CancelProposalEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.proposalId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public List<CreateDataSchemaEventResponse> getCreateDataSchemaEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(CREATEDATASCHEMA_EVENT, transactionReceipt);
        ArrayList<CreateDataSchemaEventResponse> responses = new ArrayList<CreateDataSchemaEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            CreateDataSchemaEventResponse typedResponse = new CreateDataSchemaEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.dataSchemaId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.hash = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.manager = (String) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public List<CreateProposalEventResponse> getCreateProposalEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(CREATEPROPOSAL_EVENT, transactionReceipt);
        ArrayList<CreateProposalEventResponse> responses = new ArrayList<CreateProposalEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            CreateProposalEventResponse typedResponse = new CreateProposalEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.proposalId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public List<DeleteDataSchemaEventResponse> getDeleteDataSchemaEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(DELETEDATASCHEMA_EVENT, transactionReceipt);
        ArrayList<DeleteDataSchemaEventResponse> responses = new ArrayList<DeleteDataSchemaEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            DeleteDataSchemaEventResponse typedResponse = new DeleteDataSchemaEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.dataSchemaId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public List<ExecuteProposalEventResponse> getExecuteProposalEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(EXECUTEPROPOSAL_EVENT, transactionReceipt);
        ArrayList<ExecuteProposalEventResponse> responses = new ArrayList<ExecuteProposalEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ExecuteProposalEventResponse typedResponse = new ExecuteProposalEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.proposalId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.success = (Boolean) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public List<ModifyDataSchemaEventResponse> getModifyDataSchemaEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(MODIFYDATASCHEMA_EVENT, transactionReceipt);
        ArrayList<ModifyDataSchemaEventResponse> responses = new ArrayList<ModifyDataSchemaEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ModifyDataSchemaEventResponse typedResponse = new ModifyDataSchemaEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.dataSchemaId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.hash = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public List<VoteProposalEventResponse> getVoteProposalEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(VOTEPROPOSAL_EVENT, transactionReceipt);
        ArrayList<VoteProposalEventResponse> responses = new ArrayList<VoteProposalEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            VoteProposalEventResponse typedResponse = new VoteProposalEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.proposalId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public TransactionReceipt addGovernor(String governor) {
        final Function function = new Function(
                FUNC_ADDGOVERNOR, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.v3.codec.datatypes.Address(governor)), 
                Collections.<TypeReference<?>>emptyList(), 0);
        return executeTransaction(function);
    }

    public String addGovernor(String governor, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_ADDGOVERNOR, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.v3.codec.datatypes.Address(governor)), 
                Collections.<TypeReference<?>>emptyList(), 0);
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForAddGovernor(String governor) {
        final Function function = new Function(
                FUNC_ADDGOVERNOR, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.v3.codec.datatypes.Address(governor)), 
                Collections.<TypeReference<?>>emptyList(), 0);
        return createSignedTransaction(function);
    }

    public Tuple1<String> getAddGovernorInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_ADDGOVERNOR, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public TransactionReceipt cancelProposal(byte[] proposalId) {
        final Function function = new Function(
                FUNC_CANCELPROPOSAL, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Bytes32(proposalId)), 
                Collections.<TypeReference<?>>emptyList(), 4);
        return executeTransaction(function);
    }

    public String cancelProposal(byte[] proposalId, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_CANCELPROPOSAL, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Bytes32(proposalId)), 
                Collections.<TypeReference<?>>emptyList(), 4);
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForCancelProposal(byte[] proposalId) {
        final Function function = new Function(
                FUNC_CANCELPROPOSAL, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Bytes32(proposalId)), 
                Collections.<TypeReference<?>>emptyList(), 4);
        return createSignedTransaction(function);
    }

    public Tuple1<byte[]> getCancelProposalInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_CANCELPROPOSAL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<byte[]>(

                (byte[]) results.get(0).getValue()
                );
    }

    public TransactionReceipt changeMode(BigInteger newMode) {
        final Function function = new Function(
                FUNC_CHANGEMODE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint8(newMode)), 
                Collections.<TypeReference<?>>emptyList(), 0);
        return executeTransaction(function);
    }

    public String changeMode(BigInteger newMode, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_CHANGEMODE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint8(newMode)), 
                Collections.<TypeReference<?>>emptyList(), 0);
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForChangeMode(BigInteger newMode) {
        final Function function = new Function(
                FUNC_CHANGEMODE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint8(newMode)), 
                Collections.<TypeReference<?>>emptyList(), 0);
        return createSignedTransaction(function);
    }

    public Tuple1<BigInteger> getChangeModeInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_CHANGEMODE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public TransactionReceipt createDataSchema(byte[] hash) {
        final Function function = new Function(
                FUNC_CREATEDATASCHEMA, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Bytes32(hash)), 
                Collections.<TypeReference<?>>emptyList(), 0);
        return executeTransaction(function);
    }

    public String createDataSchema(byte[] hash, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_CREATEDATASCHEMA, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Bytes32(hash)), 
                Collections.<TypeReference<?>>emptyList(), 0);
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForCreateDataSchema(byte[] hash) {
        final Function function = new Function(
                FUNC_CREATEDATASCHEMA, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Bytes32(hash)), 
                Collections.<TypeReference<?>>emptyList(), 0);
        return createSignedTransaction(function);
    }

    public Tuple1<byte[]> getCreateDataSchemaInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_CREATEDATASCHEMA, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<byte[]>(

                (byte[]) results.get(0).getValue()
                );
    }

    public Tuple1<byte[]> getCreateDataSchemaOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_CREATEDATASCHEMA, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicBytes>() {}));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<byte[]>(

                (byte[]) results.get(0).getValue()
                );
    }

    public TransactionReceipt createProposal(String to, BigInteger nonce, byte[] data) {
        final Function function = new Function(
                FUNC_CREATEPROPOSAL, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.v3.codec.datatypes.Address(to), 
                new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint256(nonce), 
                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicBytes(data)), 
                Collections.<TypeReference<?>>emptyList(), 0);
        return executeTransaction(function);
    }

    public String createProposal(String to, BigInteger nonce, byte[] data,
            TransactionCallback callback) {
        final Function function = new Function(
                FUNC_CREATEPROPOSAL, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.v3.codec.datatypes.Address(to), 
                new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint256(nonce), 
                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicBytes(data)), 
                Collections.<TypeReference<?>>emptyList(), 0);
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForCreateProposal(String to, BigInteger nonce, byte[] data) {
        final Function function = new Function(
                FUNC_CREATEPROPOSAL, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.v3.codec.datatypes.Address(to), 
                new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint256(nonce), 
                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicBytes(data)), 
                Collections.<TypeReference<?>>emptyList(), 0);
        return createSignedTransaction(function);
    }

    public Tuple3<String, BigInteger, byte[]> getCreateProposalInput(
            TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_CREATEPROPOSAL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<DynamicBytes>() {}));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, BigInteger, byte[]>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue(), 
                (byte[]) results.get(2).getValue()
                );
    }

    public Tuple1<byte[]> getCreateProposalOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_CREATEPROPOSAL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<byte[]>(

                (byte[]) results.get(0).getValue()
                );
    }

    public TransactionReceipt deleteDataSchema(byte[] dataSchemaId) {
        final Function function = new Function(
                FUNC_DELETEDATASCHEMA, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicBytes(dataSchemaId)), 
                Collections.<TypeReference<?>>emptyList(), 0);
        return executeTransaction(function);
    }

    public String deleteDataSchema(byte[] dataSchemaId, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_DELETEDATASCHEMA, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicBytes(dataSchemaId)), 
                Collections.<TypeReference<?>>emptyList(), 0);
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForDeleteDataSchema(byte[] dataSchemaId) {
        final Function function = new Function(
                FUNC_DELETEDATASCHEMA, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicBytes(dataSchemaId)), 
                Collections.<TypeReference<?>>emptyList(), 0);
        return createSignedTransaction(function);
    }

    public Tuple1<byte[]> getDeleteDataSchemaInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_DELETEDATASCHEMA, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicBytes>() {}));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<byte[]>(

                (byte[]) results.get(0).getValue()
                );
    }

    public BigInteger mode() throws ContractException {
        final Function function = new Function(FUNC_MODE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public TransactionReceipt modifyDataSchema(byte[] dataSchemaId, byte[] hash) {
        final Function function = new Function(
                FUNC_MODIFYDATASCHEMA, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicBytes(dataSchemaId), 
                new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Bytes32(hash)), 
                Collections.<TypeReference<?>>emptyList(), 0);
        return executeTransaction(function);
    }

    public String modifyDataSchema(byte[] dataSchemaId, byte[] hash, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_MODIFYDATASCHEMA, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicBytes(dataSchemaId), 
                new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Bytes32(hash)), 
                Collections.<TypeReference<?>>emptyList(), 0);
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForModifyDataSchema(byte[] dataSchemaId, byte[] hash) {
        final Function function = new Function(
                FUNC_MODIFYDATASCHEMA, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicBytes(dataSchemaId), 
                new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Bytes32(hash)), 
                Collections.<TypeReference<?>>emptyList(), 0);
        return createSignedTransaction(function);
    }

    public Tuple2<byte[], byte[]> getModifyDataSchemaInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_MODIFYDATASCHEMA, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicBytes>() {}, new TypeReference<Bytes32>() {}));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<byte[], byte[]>(

                (byte[]) results.get(0).getValue(), 
                (byte[]) results.get(1).getValue()
                );
    }

    public TransactionReceipt removeGovernor(String governor) {
        final Function function = new Function(
                FUNC_REMOVEGOVERNOR, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.v3.codec.datatypes.Address(governor)), 
                Collections.<TypeReference<?>>emptyList(), 0);
        return executeTransaction(function);
    }

    public String removeGovernor(String governor, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_REMOVEGOVERNOR, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.v3.codec.datatypes.Address(governor)), 
                Collections.<TypeReference<?>>emptyList(), 0);
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForRemoveGovernor(String governor) {
        final Function function = new Function(
                FUNC_REMOVEGOVERNOR, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.v3.codec.datatypes.Address(governor)), 
                Collections.<TypeReference<?>>emptyList(), 0);
        return createSignedTransaction(function);
    }

    public Tuple1<String> getRemoveGovernorInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_REMOVEGOVERNOR, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public TransactionReceipt vote(byte[] proposalId) {
        final Function function = new Function(
                FUNC_VOTE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Bytes32(proposalId)), 
                Collections.<TypeReference<?>>emptyList(), 0);
        return executeTransaction(function);
    }

    public String vote(byte[] proposalId, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_VOTE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Bytes32(proposalId)), 
                Collections.<TypeReference<?>>emptyList(), 0);
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForVote(byte[] proposalId) {
        final Function function = new Function(
                FUNC_VOTE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Bytes32(proposalId)), 
                Collections.<TypeReference<?>>emptyList(), 0);
        return createSignedTransaction(function);
    }

    public Tuple1<byte[]> getVoteInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_VOTE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<byte[]>(

                (byte[]) results.get(0).getValue()
                );
    }

    public static DataSchemaModule load(String contractAddress, Client client,
            CryptoKeyPair credential) {
        return new DataSchemaModule(contractAddress, client, credential);
    }

    public static DataSchemaModule deploy(Client client, CryptoKeyPair credential, String _governor,
            String accountContract) throws ContractException {
        byte[] encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.fisco.bcos.sdk.v3.codec.datatypes.Address(_governor), 
                new org.fisco.bcos.sdk.v3.codec.datatypes.Address(accountContract)));
        return deploy(DataSchemaModule.class, client, credential, getBinary(client.getCryptoSuite()), getABI(), encodedConstructor, null);
    }

    public static class CancelProposalEventResponse {
        public TransactionReceipt.Logs log;

        public byte[] proposalId;
    }

    public static class CreateDataSchemaEventResponse {
        public TransactionReceipt.Logs log;

        public byte[] dataSchemaId;

        public byte[] hash;

        public String manager;
    }

    public static class CreateProposalEventResponse {
        public TransactionReceipt.Logs log;

        public byte[] proposalId;
    }

    public static class DeleteDataSchemaEventResponse {
        public TransactionReceipt.Logs log;

        public byte[] dataSchemaId;
    }

    public static class ExecuteProposalEventResponse {
        public TransactionReceipt.Logs log;

        public byte[] proposalId;

        public Boolean success;
    }

    public static class ModifyDataSchemaEventResponse {
        public TransactionReceipt.Logs log;

        public byte[] dataSchemaId;

        public byte[] hash;
    }

    public static class VoteProposalEventResponse {
        public TransactionReceipt.Logs log;

        public byte[] proposalId;
    }
}
