package com.webank.databrain.blockchain;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.fisco.bcos.sdk.v3.client.Client;
import org.fisco.bcos.sdk.v3.codec.abi.FunctionEncoder;
import org.fisco.bcos.sdk.v3.codec.datatypes.Address;
import org.fisco.bcos.sdk.v3.codec.datatypes.Bool;
import org.fisco.bcos.sdk.v3.codec.datatypes.DynamicBytes;
import org.fisco.bcos.sdk.v3.codec.datatypes.Event;
import org.fisco.bcos.sdk.v3.codec.datatypes.Function;
import org.fisco.bcos.sdk.v3.codec.datatypes.Type;
import org.fisco.bcos.sdk.v3.codec.datatypes.TypeReference;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.Bytes32;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint256;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint8;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.tuples.generated.Tuple1;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.tuples.generated.Tuple2;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.tuples.generated.Tuple3;
import org.fisco.bcos.sdk.v3.contract.Contract;
import org.fisco.bcos.sdk.v3.crypto.CryptoSuite;
import org.fisco.bcos.sdk.v3.crypto.keypair.CryptoKeyPair;
import org.fisco.bcos.sdk.v3.model.CryptoType;
import org.fisco.bcos.sdk.v3.model.TransactionReceipt;
import org.fisco.bcos.sdk.v3.model.callback.TransactionCallback;
import org.fisco.bcos.sdk.v3.transaction.model.exception.ContractException;

@SuppressWarnings("unchecked")
public class ProductModule extends Contract {
    public static final String[] BINARY_ARRAY = {"","5b60ff169052506001546080820151610e0890600261195d565b60ff1610610ef557602081015160608201516040516000906001600160a01b03841690610e369084906118ff565b6000604051808303816000865af19150503d8060008114610e73576040519150601f19603f3d011682016040523d82523d6000602084013e610e78565b606091505b5050905080610e88576003610e8b565b60025b8460a001906004811115610ea157610ea16114a5565b90816004811115610eb457610eb46114a5565b9052506040805186815282151560208201527f3b35e7d1d39c6fa4f9cc7acf876c5c3a01117f7b10f456540321277c95fa07a7910160405180910390a15050505b600082815260036020818152604092839020845181546001600160a01b039182166001600160a01b03199182161783558387015160018401805491909316911617905592840151600284015560608401518051859493610f5a9390850192019061141c565b5060808201516004808301805460ff90931660ff1984168117825560a086015193919261ffff199092161790610100908490811115610f9b57610f9b6114a5565b0217905550506040518381527f4973d6156c5324170079a1bf6e22313bedcf5baf0b036efbd1a7e6e9ec4369609150602001610272565b33301415611067576001600160a01b03811660009081526020819052604090205460ff166110395760405162461bcd60e51b815260206004820152601460248201527311dbdd995c9b9bdc881b9bdd08195e1a5cdd195960621b604482015260640161022c565b6001600160a01b0381166000908152602081905260408120805460ff19169055600180549161031c83611986565b611070336110ee565b600060025460ff166001811115611089576110896114a5565b14156103b0576001600160a01b03811660009081526020819052604090205460ff166110395760405162461bcd60e51b815260206004820152601460248201527311dbdd995c9b9bdc881b9bdd08195e1a5cdd195960621b604482015260640161022c565b6001600160a01b03811660009081526020819052604090205460ff166103ef5760405162461bcd60e51b815260206004820152601360248201527223b7bb1d1024b73b30b634b21031b0b63632b960691b604482015260640161022c565b6000858585858560405160200161116795949392919061199d565b60408051601f1981840301815291905280516020909101209050600080828152600360205260409020600490810154610100900460ff16908111156111ae576111ae6114a5565b146111fb5760405162461bcd60e51b815260206004820152601960248201527f5472616e73616374696f6e20616c726561647920657869737400000000000000604482015260640161022c565b60006040518060c00160405280886001600160a01b03168152602001876001600160a01b0316815260200186815260200185858080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920182905250938552505050602082015260400160019052600083815260036020818152604092839020845181546001600160a01b039182166001600160a01b0319918216178355838701516001840180549190931691161790559284015160028401556060840151805194955085946112d993850192919091019061141c565b5060808201516004808301805460ff90931660ff1984168117825560a086015193919261ffff19909216179061010090849081111561131a5761131a6114a5565b0217905550506040518381527f2d231481d8c1af3958a30a257e93e0df6b089bc07ebedc0a86e7355d1aaf1338915060200160405180910390a15095945050505050565b50805461136a906118c4565b6000825580601f1061137a575050565b601f0160209004906000526020600020908101906103ef9190611490565b8280546113a4906118c4565b90600052602060002090601f0160209004810192826113c6576000855561140c565b82601f106113df5782800160ff1982351617855561140c565b8280016001018555821561140c579182015b8281111561140c5782358255916020019190600101906113f1565b50611418929150611490565b5090565b828054611428906118c4565b90600052602060002090601f01602090048101928261144a576000855561140c565b82601f1061146357805160ff191683800117855561140c565b8280016001018555821561140c579182015b8281111561140c578251825591602001919060010190611475565b5b808211156114185760008155600101611491565b634e487b7160e01b600052602160045260246000fd5b60208101600283106114dd57634e487b7160e01b600052602160045260246000fd5b91905290565b6000602082840312156114f557600080fd5b5035919050565b6001600160a01b03811681146103ef57600080fd5b60006020828403121561152357600080fd5b813561152e816114fc565b9392505050565b60008083601f84011261154757600080fd5b50813567ffffffffffffffff81111561155f57600080fd5b60208301915083602082850101111561157757600080fd5b9250929050565b6000806000806060858703121561159457600080fd5b843561159f816114fc565b935060208501359250604085013567ffffffffffffffff8111156115c257600080fd5b6115ce87828801611535565b95989497509550505050565b6000806000604084860312156115ef57600080fd5b833567ffffffffffffffff81111561160657600080fd5b61161286828701611535565b909790965060209590950135949350505050565b60008060006040848603121561163b57600080fd5b833567ffffffffffffffff81111561165257600080fd5b61165e86828701611535565b9094509250506020840135801515811461167757600080fd5b809150509250925092565b60005b8381101561169d578181015183820152602001611685565b8381111561073f5750506000910152565b600081518084526116c6816020860160208601611682565b601f01601f19169290920160200192915050565b60208152600061152e60208301846116ae565b6000806020838503121561170057600080fd5b823567ffffffffffffffff81111561171757600080fd5b61172385828601611535565b90969095509350505050565b600281106103ef57600080fd5b60006020828403121561174e57600080fd5b813561152e8161172f565b634e487b7160e01b600052601160045260246000fd5b600060001982141561178357611783611759565b5060010190565b6000821982111561179d5761179d611759565b500190565b8183823760009101908152919050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6020815260006117ef6020830184866117b2565b949350505050565b80516118028161172f565b919050565b600060a0828403121561181957600080fd5b60405160a0810181811067ffffffffffffffff8211171561184a57634e487b7160e01b600052604160045260246000fd5b60405282518152602083015161185f816114fc565b602082015260408301516004811061187657600080fd5b6040820152611887606084016117f7565b6060820152608083015160808201528091505092915050565b6040815260006118b46040830185876117b2565b9050826020830152949350505050565b600181811c908216806118d857607f821691505b602082108114156118f957634e487b7160e01b600052602260045260246000fd5b50919050565b60008251611911818460208701611682565b9190910192915050565b60408152600061192e60408301856116ae565b90508260208301529392505050565b600060ff821660ff81141561195457611954611759565b60010192915050565b600060ff821660ff84168160ff048111821515161561197e5761197e611759565b029392505050565b60008161199557611995611759565b506000190190565b60006bffffffffffffffffffffffff19808860601b168352808760601b1660148401525084602883015282846048840137506000910160480190815294935050505056fea2646970667358221220fc701400c0a1cdbb69bbabcf73797555ad82bd3d8327d3d44d08608034b3bf1e64736f6c634300080b0033"};

    public static final String BINARY = org.fisco.bcos.sdk.v3.utils.StringUtils.joinAll("", BINARY_ARRAY);

    public static final String[] SM_BINARY_ARRAY = {"","a15050505050565b610dff336110f7565b60008181526003602052604090206001600482810154610100900460ff1690811115610e2d57610e2d6115da565b14610e7b57604051636381e58960e11b815260206004820152601a60248201527f496e76616c6964207472616e73616374696f6e20737461747573000000000000604482015260640161020b565b60048101805461ff0019166104001790556040518281527f5058486f68922f5def2ddcf51515b2db34dd9fb76d56609ba4375a8271475aef906020016108a8565b606081610edc5760405163f03d1dc360e01b815260040160405180910390fd5b600554604051631637d7b960e11b81523360048201526000916001600160a01b031690632c6faf729060240160a060405180830381865afa158015610f25573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f4991906117c9565b9050600281604001516003811115610f6357610f636115da565b14610f8757805160405163cab14afb60e01b8152600481019190915260240161020b565b60008381526007602052604090208054610fa0906118cf565b159050610fc3576040516320a7ca9160e11b81526004810184905260240161020b565b805160009081526008602090815260409182902054835183519283015281830181905282518083038401815260c0830184526060830187815285516080850152600160a090940193909352925192945091600690611022908690611953565b9081526020016040518091039020600082015181600001556020820151816001015560408201518160020160006101000a81548160ff0219169083600381111561106e5761106e6115da565b021790555050506000848152600760209081526040909120845161109492860190611427565b508061109f8161189c565b835160009081526008602052604090819020829055519092507f9479ce40d6f407cf52e986a7c507a955c7e55c90aaf12291e74593e6bff3c8b491506110e89085908790611986565b60405180910390a15050919050565b6001600160a01b03811660009081526020819052604090205460ff1661049557604051636381e58960e11b815260206004820152601360248201527223b7bb1d1024b73b30b634b21031b0b63632b960691b604482015260640161020b565b600085858585856040516020016111719594939291906119a8565b60408051601f1981840301815291905280516020909101209050600080828152600360205260409020600490810154610100900460ff16908111156111b8576111b86115da565b1461120657604051636381e58960e11b815260206004820152601960248201527f5472616e73616374696f6e20616c726561647920657869737400000000000000604482015260640161020b565b60006040518060c00160405280886001600160a01b03168152602001876001600160a01b0316815260200186815260200185858080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920182905250938552505050602082015260400160019052600083815260036020818152604092839020845181546001600160a01b039182166001600160a01b0319918216178355838701516001840180549190931691161790559284015160028401556060840151805194955085946112e4938501929190910190611427565b5060808201516004808301805460ff90931660ff1984168117825560a086015193919261ffff199092161790610100908490811115611325576113256115da565b0217905550506040518381527f24ba2a097b8583ceb85c849bc3906addc9c36dddfa40b96449fb65f70b549aca915060200160405180910390a15095945050505050565b508054611375906118cf565b6000825580601f10611385575050565b601f016020900490600052602060002090810190610495919061149b565b8280546113af906118cf565b90600052602060002090601f0160209004810192826113d15760008555611417565b82601f106113ea5782800160ff19823516178555611417565b82800160010185558215611417579182015b828111156114175782358255916020019190600101906113fc565b5061142392915061149b565b5090565b828054611433906118cf565b90600052602060002090601f0160209004810192826114555760008555611417565b82601f1061146e57805160ff1916838001178555611417565b82800160010185558215611417579182015b82811115611417578251825591602001919060010190611480565b5b80821115611423576000815560010161149c565b60008083601f8401126114c257600080fd5b50813567ffffffffffffffff8111156114da57600080fd5b6020830191508360208285010111156114f257600080fd5b9250929050565b60008060006040848603121561150e57600080fd5b833567ffffffffffffffff81111561152557600080fd5b611531868287016114b0565b909790965060209590950135949350505050565b6001600160a01b038116811461049557600080fd5b60006020828403121561156c57600080fd5b813561157781611545565b9392505050565b6000806000806060858703121561159457600080fd5b843561159f81611545565b935060208501359250604085013567ffffffffffffffff8111156115c257600080fd5b6115ce878288016114b0565b95989497509550505050565b63b95aa35560e01b600052602160045260246000fd5b60208101600283106116125763b95aa35560e01b600052602160045260246000fd5b91905290565b60006020828403121561162a57600080fd5b5035919050565b6002811061049557600080fd5b60006020828403121561165057600080fd5b813561157781611631565b60008060006040848603121561167057600080fd5b833567ffffffffffffffff81111561168757600080fd5b611693868287016114b0565b909450925050602084013580151581146116ac57600080fd5b809150509250925092565b600080602083850312156116ca57600080fd5b823567ffffffffffffffff8111156116e157600080fd5b6116ed858286016114b0565b90969095509350505050565b60005b838110156117145781810151838201526020016116fc565b83811115610be85750506000910152565b6000815180845261173d8160208601602086016116f9565b601f01601f19169290920160200192915050565b6020815260006115776020830184611725565b8183823760009101908152919050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6020815260006117b1602083018486611774565b949350505050565b80516117c481611631565b919050565b600060a082840312156117db57600080fd5b60405160a0810181811067ffffffffffffffff8211171561180c5763b95aa35560e01b600052604160045260246000fd5b60405282518152602083015161182181611545565b602082015260408301516004811061183857600080fd5b6040820152611849606084016117b9565b6060820152608083015160808201528091505092915050565b604081526000611876604083018587611774565b9050826020830152949350505050565b63b95aa35560e01b600052601160045260246000fd5b60006000198214156118b0576118b0611886565b5060010190565b600082198211156118ca576118ca611886565b500190565b600181811c908216806118e357607f821691505b602082108114156119045763b95aa35560e01b600052602260045260246000fd5b50919050565b600060ff821660ff81141561192157611921611886565b60010192915050565b600060ff821660ff84168160ff048111821515161561194b5761194b611886565b029392505050565b600082516119658184602087016116f9565b9190910192915050565b60008161197e5761197e611886565b506000190190565b6040815260006119996040830185611725565b90508260208301529392505050565b60006bffffffffffffffffffffffff19808860601b168352808760601b1660148401525084602883015282846048840137506000910160480190815294935050505056fea26469706673582212205c990c7b4c80bd80ee38dbca54fc5fa110cd65eba4986716af240d416ca8813e64736f6c634300080b0033"};

    public static final String SM_BINARY = org.fisco.bcos.sdk.v3.utils.StringUtils.joinAll("", SM_BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"accountContract\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"did\",\"type\":\"bytes32\"}],\"name\":\"InvalidAccountStatus\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidCaller\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidHash\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"productId\",\"type\":\"bytes\"}],\"name\":\"InvalidProductStatus\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"productId\",\"type\":\"bytes\"}],\"name\":\"OnlyProductOwnerCanCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"ProductAlreadyCreated\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"productId\",\"type\":\"bytes\"}],\"name\":\"ProductNotExisted\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"proposalId\",\"type\":\"bytes32\"}],\"name\":\"CancelProposal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"productId\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"CreateProduct\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"proposalId\",\"type\":\"bytes32\"}],\"name\":\"CreateProposal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"productId\",\"type\":\"bytes\"}],\"name\":\"DeleteProduct\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"proposalId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"name\":\"ExecuteProposal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"productId\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"ModifyProduct\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"productId\",\"type\":\"bytes\"}],\"name\":\"ProductApproved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"productId\",\"type\":\"bytes\"}],\"name\":\"ProductDenied\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"proposalId\",\"type\":\"bytes32\"}],\"name\":\"VoteProposal\",\"type\":\"event\"},{\"conflictFields\":[{\"kind\":0},{\"kind\":2,\"slot\":0,\"value\":[0]},{\"kind\":2,\"slot\":4,\"value\":[0]},{\"kind\":4,\"value\":[1]},{\"kind\":4,\"value\":[2]}],\"inputs\":[{\"internalType\":\"address\",\"name\":\"governor\",\"type\":\"address\"}],\"name\":\"addGovernor\",\"outputs\":[],\"selector\":[1011492304,224856489],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":0},{\"kind\":2,\"slot\":0,\"value\":[0]},{\"kind\":2,\"slot\":4,\"value\":[0]},{\"kind\":4,\"value\":[2]}],\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"productId\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"agree\",\"type\":\"bool\"}],\"name\":\"approveProduct\",\"outputs\":[],\"selector\":[1596574597,2501836167],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":2,\"slot\":0,\"value\":[0]},{\"kind\":3,\"slot\":3,\"value\":[0]}],\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"proposalId\",\"type\":\"bytes32\"}],\"name\":\"cancelProposal\",\"outputs\":[],\"selector\":[926379176,2940694586],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":0},{\"kind\":2,\"slot\":0,\"value\":[0]},{\"kind\":2,\"slot\":4,\"value\":[0]},{\"kind\":4,\"value\":[2]}],\"inputs\":[{\"internalType\":\"enum GovernModule.GovernMode\",\"name\":\"newMode\",\"type\":\"uint8\"}],\"name\":\"changeMode\",\"outputs\":[],\"selector\":[2775083046,1774458637],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":0}],\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"createProduct\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"productId\",\"type\":\"bytes\"}],\"selector\":[2647437151,3697913545],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":0},{\"kind\":2,\"slot\":0,\"value\":[0]},{\"kind\":2,\"slot\":4,\"value\":[0]}],\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"createProposal\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"proposalId\",\"type\":\"bytes32\"}],\"selector\":[1357615905,959028584],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":0}],\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"productId\",\"type\":\"bytes\"}],\"name\":\"deleteProduct\",\"outputs\":[],\"selector\":[2665893030,2784611475],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":4,\"value\":[2]}],\"inputs\":[],\"name\":\"mode\",\"outputs\":[{\"internalType\":\"enum GovernModule.GovernMode\",\"name\":\"\",\"type\":\"uint8\"}],\"selector\":[693785106,1032774748],\"stateMutability\":\"view\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":0}],\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"productId\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"modifyProduct\",\"outputs\":[],\"selector\":[1545129480,165731704],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":0},{\"kind\":2,\"slot\":0,\"value\":[0]},{\"kind\":2,\"slot\":4,\"value\":[0]},{\"kind\":4,\"value\":[1]},{\"kind\":4,\"value\":[2]}],\"inputs\":[{\"internalType\":\"address\",\"name\":\"governor\",\"type\":\"address\"}],\"name\":\"removeGovernor\",\"outputs\":[],\"selector\":[4006456456,2398553536],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":0}],\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"proposalId\",\"type\":\"bytes32\"}],\"name\":\"vote\",\"outputs\":[],\"selector\":[2795236026,1620399368],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"};

    public static final String ABI = org.fisco.bcos.sdk.v3.utils.StringUtils.joinAll("", ABI_ARRAY);

    public static final String FUNC_ADDGOVERNOR = "addGovernor";

    public static final String FUNC_APPROVEPRODUCT = "approveProduct";

    public static final String FUNC_CANCELPROPOSAL = "cancelProposal";

    public static final String FUNC_CHANGEMODE = "changeMode";

    public static final String FUNC_CREATEPRODUCT = "createProduct";

    public static final String FUNC_CREATEPROPOSAL = "createProposal";

    public static final String FUNC_DELETEPRODUCT = "deleteProduct";

    public static final String FUNC_MODE = "mode";

    public static final String FUNC_MODIFYPRODUCT = "modifyProduct";

    public static final String FUNC_REMOVEGOVERNOR = "removeGovernor";

    public static final String FUNC_VOTE = "vote";

    public static final Event CANCELPROPOSAL_EVENT = new Event("CancelProposal", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
    ;

    public static final Event CREATEPRODUCT_EVENT = new Event("CreateProduct", 
            Arrays.<TypeReference<?>>asList(new TypeReference<DynamicBytes>() {}, new TypeReference<Bytes32>() {}));
    ;

    public static final Event CREATEPROPOSAL_EVENT = new Event("CreateProposal", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
    ;

    public static final Event DELETEPRODUCT_EVENT = new Event("DeleteProduct", 
            Arrays.<TypeReference<?>>asList(new TypeReference<DynamicBytes>() {}));
    ;

    public static final Event EXECUTEPROPOSAL_EVENT = new Event("ExecuteProposal", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Bool>() {}));
    ;

    public static final Event MODIFYPRODUCT_EVENT = new Event("ModifyProduct", 
            Arrays.<TypeReference<?>>asList(new TypeReference<DynamicBytes>() {}, new TypeReference<Bytes32>() {}));
    ;

    public static final Event PRODUCTAPPROVED_EVENT = new Event("ProductApproved", 
            Arrays.<TypeReference<?>>asList(new TypeReference<DynamicBytes>() {}));
    ;

    public static final Event PRODUCTDENIED_EVENT = new Event("ProductDenied", 
            Arrays.<TypeReference<?>>asList(new TypeReference<DynamicBytes>() {}));
    ;

    public static final Event VOTEPROPOSAL_EVENT = new Event("VoteProposal", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
    ;

    protected ProductModule(String contractAddress, Client client, CryptoKeyPair credential) {
        super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
    }

    public static String getBinary(CryptoSuite cryptoSuite) {
        return (cryptoSuite.getCryptoTypeConfig() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public static String getABI() {
        return ABI;
    }

    public List<CancelProposalEventResponse> getCancelProposalEvents(
            TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(CANCELPROPOSAL_EVENT, transactionReceipt);
        ArrayList<CancelProposalEventResponse> responses = new ArrayList<CancelProposalEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            CancelProposalEventResponse typedResponse = new CancelProposalEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.proposalId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public List<CreateProductEventResponse> getCreateProductEvents(
            TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(CREATEPRODUCT_EVENT, transactionReceipt);
        ArrayList<CreateProductEventResponse> responses = new ArrayList<CreateProductEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            CreateProductEventResponse typedResponse = new CreateProductEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.productId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.hash = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public List<CreateProposalEventResponse> getCreateProposalEvents(
            TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(CREATEPROPOSAL_EVENT, transactionReceipt);
        ArrayList<CreateProposalEventResponse> responses = new ArrayList<CreateProposalEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            CreateProposalEventResponse typedResponse = new CreateProposalEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.proposalId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public List<DeleteProductEventResponse> getDeleteProductEvents(
            TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(DELETEPRODUCT_EVENT, transactionReceipt);
        ArrayList<DeleteProductEventResponse> responses = new ArrayList<DeleteProductEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            DeleteProductEventResponse typedResponse = new DeleteProductEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.productId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public List<ExecuteProposalEventResponse> getExecuteProposalEvents(
            TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(EXECUTEPROPOSAL_EVENT, transactionReceipt);
        ArrayList<ExecuteProposalEventResponse> responses = new ArrayList<ExecuteProposalEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            ExecuteProposalEventResponse typedResponse = new ExecuteProposalEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.proposalId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.success = (Boolean) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public List<ModifyProductEventResponse> getModifyProductEvents(
            TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(MODIFYPRODUCT_EVENT, transactionReceipt);
        ArrayList<ModifyProductEventResponse> responses = new ArrayList<ModifyProductEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            ModifyProductEventResponse typedResponse = new ModifyProductEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.productId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.hash = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public List<ProductApprovedEventResponse> getProductApprovedEvents(
            TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(PRODUCTAPPROVED_EVENT, transactionReceipt);
        ArrayList<ProductApprovedEventResponse> responses = new ArrayList<ProductApprovedEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            ProductApprovedEventResponse typedResponse = new ProductApprovedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.productId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public List<ProductDeniedEventResponse> getProductDeniedEvents(
            TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(PRODUCTDENIED_EVENT, transactionReceipt);
        ArrayList<ProductDeniedEventResponse> responses = new ArrayList<ProductDeniedEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            ProductDeniedEventResponse typedResponse = new ProductDeniedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.productId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public List<VoteProposalEventResponse> getVoteProposalEvents(
            TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(VOTEPROPOSAL_EVENT, transactionReceipt);
        ArrayList<VoteProposalEventResponse> responses = new ArrayList<VoteProposalEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            VoteProposalEventResponse typedResponse = new VoteProposalEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.proposalId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public TransactionReceipt addGovernor(String governor) {
        final Function function = new Function(
                FUNC_ADDGOVERNOR, 
                Arrays.<Type>asList(new Address(governor)),
                Collections.<TypeReference<?>>emptyList(), 0);
        return executeTransaction(function);
    }

    public String addGovernor(String governor, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_ADDGOVERNOR, 
                Arrays.<Type>asList(new Address(governor)),
                Collections.<TypeReference<?>>emptyList(), 0);
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForAddGovernor(String governor) {
        final Function function = new Function(
                FUNC_ADDGOVERNOR, 
                Arrays.<Type>asList(new Address(governor)),
                Collections.<TypeReference<?>>emptyList(), 0);
        return createSignedTransaction(function);
    }

    public Tuple1<String> getAddGovernorInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_ADDGOVERNOR, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public TransactionReceipt approveProduct(byte[] productId, Boolean agree) {
        final Function function = new Function(
                FUNC_APPROVEPRODUCT, 
                Arrays.<Type>asList(new DynamicBytes(productId),
                new Bool(agree)),
                Collections.<TypeReference<?>>emptyList(), 0);
        return executeTransaction(function);
    }

    public String approveProduct(byte[] productId, Boolean agree, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_APPROVEPRODUCT, 
                Arrays.<Type>asList(new DynamicBytes(productId),
                new Bool(agree)),
                Collections.<TypeReference<?>>emptyList(), 0);
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForApproveProduct(byte[] productId, Boolean agree) {
        final Function function = new Function(
                FUNC_APPROVEPRODUCT, 
                Arrays.<Type>asList(new DynamicBytes(productId),
                new Bool(agree)),
                Collections.<TypeReference<?>>emptyList(), 0);
        return createSignedTransaction(function);
    }

    public Tuple2<byte[], Boolean> getApproveProductInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_APPROVEPRODUCT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicBytes>() {}, new TypeReference<Bool>() {}));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<byte[], Boolean>(

                (byte[]) results.get(0).getValue(), 
                (Boolean) results.get(1).getValue()
                );
    }

    public TransactionReceipt cancelProposal(byte[] proposalId) {
        final Function function = new Function(
                FUNC_CANCELPROPOSAL, 
                Arrays.<Type>asList(new Bytes32(proposalId)),
                Collections.<TypeReference<?>>emptyList(), 4);
        return executeTransaction(function);
    }

    public String cancelProposal(byte[] proposalId, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_CANCELPROPOSAL, 
                Arrays.<Type>asList(new Bytes32(proposalId)),
                Collections.<TypeReference<?>>emptyList(), 4);
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForCancelProposal(byte[] proposalId) {
        final Function function = new Function(
                FUNC_CANCELPROPOSAL, 
                Arrays.<Type>asList(new Bytes32(proposalId)),
                Collections.<TypeReference<?>>emptyList(), 4);
        return createSignedTransaction(function);
    }

    public Tuple1<byte[]> getCancelProposalInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_CANCELPROPOSAL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<byte[]>(

                (byte[]) results.get(0).getValue()
                );
    }

    public TransactionReceipt changeMode(BigInteger newMode) {
        final Function function = new Function(
                FUNC_CHANGEMODE, 
                Arrays.<Type>asList(new Uint8(newMode)),
                Collections.<TypeReference<?>>emptyList(), 0);
        return executeTransaction(function);
    }

    public String changeMode(BigInteger newMode, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_CHANGEMODE, 
                Arrays.<Type>asList(new Uint8(newMode)),
                Collections.<TypeReference<?>>emptyList(), 0);
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForChangeMode(BigInteger newMode) {
        final Function function = new Function(
                FUNC_CHANGEMODE, 
                Arrays.<Type>asList(new Uint8(newMode)),
                Collections.<TypeReference<?>>emptyList(), 0);
        return createSignedTransaction(function);
    }

    public Tuple1<BigInteger> getChangeModeInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_CHANGEMODE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public TransactionReceipt createProduct(byte[] hash) {
        final Function function = new Function(
                FUNC_CREATEPRODUCT, 
                Arrays.<Type>asList(new Bytes32(hash)),
                Collections.<TypeReference<?>>emptyList(), 0);
        return executeTransaction(function);
    }

    public String createProduct(byte[] hash, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_CREATEPRODUCT, 
                Arrays.<Type>asList(new Bytes32(hash)),
                Collections.<TypeReference<?>>emptyList(), 0);
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForCreateProduct(byte[] hash) {
        final Function function = new Function(
                FUNC_CREATEPRODUCT, 
                Arrays.<Type>asList(new Bytes32(hash)),
                Collections.<TypeReference<?>>emptyList(), 0);
        return createSignedTransaction(function);
    }

    public Tuple1<byte[]> getCreateProductInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_CREATEPRODUCT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<byte[]>(

                (byte[]) results.get(0).getValue()
                );
    }

    public Tuple1<byte[]> getCreateProductOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_CREATEPRODUCT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicBytes>() {}));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<byte[]>(

                (byte[]) results.get(0).getValue()
                );
    }

    public TransactionReceipt createProposal(String to, BigInteger nonce, byte[] data) {
        final Function function = new Function(
                FUNC_CREATEPROPOSAL, 
                Arrays.<Type>asList(new Address(to),
                new Uint256(nonce),
                new DynamicBytes(data)),
                Collections.<TypeReference<?>>emptyList(), 0);
        return executeTransaction(function);
    }

    public String createProposal(String to, BigInteger nonce, byte[] data,
            TransactionCallback callback) {
        final Function function = new Function(
                FUNC_CREATEPROPOSAL, 
                Arrays.<Type>asList(new Address(to),
                new Uint256(nonce),
                new DynamicBytes(data)),
                Collections.<TypeReference<?>>emptyList(), 0);
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForCreateProposal(String to, BigInteger nonce, byte[] data) {
        final Function function = new Function(
                FUNC_CREATEPROPOSAL, 
                Arrays.<Type>asList(new Address(to),
                new Uint256(nonce),
                new DynamicBytes(data)),
                Collections.<TypeReference<?>>emptyList(), 0);
        return createSignedTransaction(function);
    }

    public Tuple3<String, BigInteger, byte[]> getCreateProposalInput(
            TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_CREATEPROPOSAL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<DynamicBytes>() {}));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, BigInteger, byte[]>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue(), 
                (byte[]) results.get(2).getValue()
                );
    }

    public Tuple1<byte[]> getCreateProposalOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_CREATEPROPOSAL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<byte[]>(

                (byte[]) results.get(0).getValue()
                );
    }

    public TransactionReceipt deleteProduct(byte[] productId) {
        final Function function = new Function(
                FUNC_DELETEPRODUCT, 
                Arrays.<Type>asList(new DynamicBytes(productId)),
                Collections.<TypeReference<?>>emptyList(), 0);
        return executeTransaction(function);
    }

    public String deleteProduct(byte[] productId, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_DELETEPRODUCT, 
                Arrays.<Type>asList(new DynamicBytes(productId)),
                Collections.<TypeReference<?>>emptyList(), 0);
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForDeleteProduct(byte[] productId) {
        final Function function = new Function(
                FUNC_DELETEPRODUCT, 
                Arrays.<Type>asList(new DynamicBytes(productId)),
                Collections.<TypeReference<?>>emptyList(), 0);
        return createSignedTransaction(function);
    }

    public Tuple1<byte[]> getDeleteProductInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_DELETEPRODUCT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicBytes>() {}));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<byte[]>(

                (byte[]) results.get(0).getValue()
                );
    }

    public BigInteger mode() throws ContractException {
        final Function function = new Function(FUNC_MODE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public TransactionReceipt modifyProduct(byte[] productId, byte[] hash) {
        final Function function = new Function(
                FUNC_MODIFYPRODUCT, 
                Arrays.<Type>asList(new DynamicBytes(productId),
                new Bytes32(hash)),
                Collections.<TypeReference<?>>emptyList(), 0);
        return executeTransaction(function);
    }

    public String modifyProduct(byte[] productId, byte[] hash, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_MODIFYPRODUCT, 
                Arrays.<Type>asList(new DynamicBytes(productId),
                new Bytes32(hash)),
                Collections.<TypeReference<?>>emptyList(), 0);
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForModifyProduct(byte[] productId, byte[] hash) {
        final Function function = new Function(
                FUNC_MODIFYPRODUCT, 
                Arrays.<Type>asList(new DynamicBytes(productId),
                new Bytes32(hash)),
                Collections.<TypeReference<?>>emptyList(), 0);
        return createSignedTransaction(function);
    }

    public Tuple2<byte[], byte[]> getModifyProductInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_MODIFYPRODUCT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicBytes>() {}, new TypeReference<Bytes32>() {}));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<byte[], byte[]>(

                (byte[]) results.get(0).getValue(), 
                (byte[]) results.get(1).getValue()
                );
    }

    public TransactionReceipt removeGovernor(String governor) {
        final Function function = new Function(
                FUNC_REMOVEGOVERNOR, 
                Arrays.<Type>asList(new Address(governor)),
                Collections.<TypeReference<?>>emptyList(), 0);
        return executeTransaction(function);
    }

    public String removeGovernor(String governor, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_REMOVEGOVERNOR, 
                Arrays.<Type>asList(new Address(governor)),
                Collections.<TypeReference<?>>emptyList(), 0);
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForRemoveGovernor(String governor) {
        final Function function = new Function(
                FUNC_REMOVEGOVERNOR, 
                Arrays.<Type>asList(new Address(governor)),
                Collections.<TypeReference<?>>emptyList(), 0);
        return createSignedTransaction(function);
    }

    public Tuple1<String> getRemoveGovernorInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_REMOVEGOVERNOR, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public TransactionReceipt vote(byte[] proposalId) {
        final Function function = new Function(
                FUNC_VOTE, 
                Arrays.<Type>asList(new Bytes32(proposalId)),
                Collections.<TypeReference<?>>emptyList(), 0);
        return executeTransaction(function);
    }

    public String vote(byte[] proposalId, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_VOTE, 
                Arrays.<Type>asList(new Bytes32(proposalId)),
                Collections.<TypeReference<?>>emptyList(), 0);
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForVote(byte[] proposalId) {
        final Function function = new Function(
                FUNC_VOTE, 
                Arrays.<Type>asList(new Bytes32(proposalId)),
                Collections.<TypeReference<?>>emptyList(), 0);
        return createSignedTransaction(function);
    }

    public Tuple1<byte[]> getVoteInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_VOTE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<byte[]>(

                (byte[]) results.get(0).getValue()
                );
    }

    public static ProductModule load(String contractAddress, Client client,
            CryptoKeyPair credential) {
        return new ProductModule(contractAddress, client, credential);
    }

    public static ProductModule deploy(Client client, CryptoKeyPair credential, String _governor,
            String accountContract) throws ContractException {
        byte[] encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new Address(_governor),
                new Address(accountContract)));
        return deploy(ProductModule.class, client, credential, getBinary(client.getCryptoSuite()), getABI(), encodedConstructor, null);
    }

    public static class CancelProposalEventResponse {
        public TransactionReceipt.Logs log;

        public byte[] proposalId;
    }

    public static class CreateProductEventResponse {
        public TransactionReceipt.Logs log;

        public byte[] productId;

        public byte[] hash;
    }

    public static class CreateProposalEventResponse {
        public TransactionReceipt.Logs log;

        public byte[] proposalId;
    }

    public static class DeleteProductEventResponse {
        public TransactionReceipt.Logs log;

        public byte[] productId;
    }

    public static class ExecuteProposalEventResponse {
        public TransactionReceipt.Logs log;

        public byte[] proposalId;

        public Boolean success;
    }

    public static class ModifyProductEventResponse {
        public TransactionReceipt.Logs log;

        public byte[] productId;

        public byte[] hash;
    }

    public static class ProductApprovedEventResponse {
        public TransactionReceipt.Logs log;

        public byte[] productId;
    }

    public static class ProductDeniedEventResponse {
        public TransactionReceipt.Logs log;

        public byte[] productId;
    }

    public static class VoteProposalEventResponse {
        public TransactionReceipt.Logs log;

        public byte[] proposalId;
    }
}
