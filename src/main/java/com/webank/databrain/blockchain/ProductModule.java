package com.webank.databrain.blockchain;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.fisco.bcos.sdk.v3.client.Client;
import org.fisco.bcos.sdk.v3.codec.abi.FunctionEncoder;
import org.fisco.bcos.sdk.v3.codec.datatypes.Address;
import org.fisco.bcos.sdk.v3.codec.datatypes.Bool;
import org.fisco.bcos.sdk.v3.codec.datatypes.DynamicBytes;
import org.fisco.bcos.sdk.v3.codec.datatypes.Event;
import org.fisco.bcos.sdk.v3.codec.datatypes.Function;
import org.fisco.bcos.sdk.v3.codec.datatypes.Type;
import org.fisco.bcos.sdk.v3.codec.datatypes.TypeReference;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.Bytes32;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint256;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint8;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.tuples.generated.Tuple1;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.tuples.generated.Tuple2;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.tuples.generated.Tuple3;
import org.fisco.bcos.sdk.v3.contract.Contract;
import org.fisco.bcos.sdk.v3.crypto.CryptoSuite;
import org.fisco.bcos.sdk.v3.crypto.keypair.CryptoKeyPair;
import org.fisco.bcos.sdk.v3.model.CryptoType;
import org.fisco.bcos.sdk.v3.model.TransactionReceipt;
import org.fisco.bcos.sdk.v3.model.callback.TransactionCallback;
import org.fisco.bcos.sdk.v3.transaction.model.exception.ContractException;

@SuppressWarnings("unchecked")
public class ProductModule extends Contract {
    public static final String[] BINARY_ARRAY = {"","60206004820152601460248201527311dbdd995c9b9bdc881b9bdd08195e1a5cdd195960621b604482015260640161022c565b6001600160a01b0381166000908152602081905260408120805460ff19169055600180549161031c8361194e565b610e583361111e565b600060025460ff166001811115610e7157610e716114d5565b14156103b0576001600160a01b03811660009081526020819052604090205460ff16610e215760405162461bcd60e51b815260206004820152601460248201527311dbdd995c9b9bdc881b9bdd08195e1a5cdd195960621b604482015260640161022c565b606081610ef5576040516257c03760e51b815260040160405180910390fd5b600554604051632e3a17fb60e21b81523360048201526000916001600160a01b03169063b8e85fec9060240160a060405180830381865afa158015610f3e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f629190611815565b9050600281604001516003811115610f7c57610f7c6114d5565b14610fa05780516040516302fabb4560e11b8152600481019190915260240161022c565b60008381526007602052604090208054610fb9906118ae565b159050610fdc5760405163c2b5444960e01b81526004810184905260240161022c565b805160009081526008602090815260409182902054835183519283015281830181905282518083038401815260c0830184526060830187815285516080850152600160a09094019390935292519294509160069061103b908690611932565b9081526020016040518091039020600082015181600001556020820151816001015560408201518160020160006101000a81548160ff02191690836003811115611087576110876114d5565b02179055505050600084815260076020908152604090912084516110ad9286019061144c565b50806110b881611793565b835160009081526008602052604090819020829055519092506110dd91508490611932565b604051908190038120858252907f5e30d18374fe2255bb49f9991de933cca63ffd0cd9553100db9097511646a8539060200160405180910390a25050919050565b6001600160a01b03811660009081526020819052604090205460ff166103ef5760405162461bcd60e51b815260206004820152601360248201527223b7bb1d1024b73b30b634b21031b0b63632b960691b604482015260640161022c565b60008585858585604051602001611197959493929190611965565b60408051601f1981840301815291905280516020909101209050600080828152600360205260409020600490810154610100900460ff16908111156111de576111de6114d5565b1461122b5760405162461bcd60e51b815260206004820152601960248201527f5472616e73616374696f6e20616c726561647920657869737400000000000000604482015260640161022c565b60006040518060c00160405280886001600160a01b03168152602001876001600160a01b0316815260200186815260200185858080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920182905250938552505050602082015260400160019052600083815260036020818152604092839020845181546001600160a01b039182166001600160a01b03199182161783558387015160018401805491909316911617905592840151600284015560608401518051949550859461130993850192919091019061144c565b5060808201516004808301805460ff90931660ff1984168117825560a086015193919261ffff19909216179061010090849081111561134a5761134a6114d5565b0217905550506040518381527f2d231481d8c1af3958a30a257e93e0df6b089bc07ebedc0a86e7355d1aaf1338915060200160405180910390a15095945050505050565b50805461139a906118ae565b6000825580601f106113aa575050565b601f0160209004906000526020600020908101906103ef91906114c0565b8280546113d4906118ae565b90600052602060002090601f0160209004810192826113f6576000855561143c565b82601f1061140f5782800160ff1982351617855561143c565b8280016001018555821561143c579182015b8281111561143c578235825591602001919060010190611421565b506114489291506114c0565b5090565b828054611458906118ae565b90600052602060002090601f01602090048101928261147a576000855561143c565b82601f1061149357805160ff191683800117855561143c565b8280016001018555821561143c579182015b8281111561143c5782518255916020019190600101906114a5565b5b8082111561144857600081556001016114c1565b634e487b7160e01b600052602160045260246000fd5b602081016002831061150d57634e487b7160e01b600052602160045260246000fd5b91905290565b60006020828403121561152557600080fd5b5035919050565b6001600160a01b03811681146103ef57600080fd5b60006020828403121561155357600080fd5b813561155e8161152c565b9392505050565b60008083601f84011261157757600080fd5b50813567ffffffffffffffff81111561158f57600080fd5b6020830191508360208285010111156115a757600080fd5b9250929050565b600080600080606085870312156115c457600080fd5b84356115cf8161152c565b935060208501359250604085013567ffffffffffffffff8111156115f257600080fd5b6115fe87828801611565565b95989497509550505050565b60008060006040848603121561161f57600080fd5b833567ffffffffffffffff81111561163657600080fd5b61164286828701611565565b909790965060209590950135949350505050565b60008060006040848603121561166b57600080fd5b833567ffffffffffffffff81111561168257600080fd5b61168e86828701611565565b909450925050602084013580151581146116a757600080fd5b809150509250925092565b600080602083850312156116c557600080fd5b823567ffffffffffffffff8111156116dc57600080fd5b6116e885828601611565565b90969095509350505050565b600281106103ef57600080fd5b60006020828403121561171357600080fd5b813561155e816116f4565b60005b83811015611739578181015183820152602001611721565b8381111561075a5750506000910152565b602081526000825180602084015261176981604085016020870161171e565b601f01601f19169190910160400192915050565b634e487b7160e01b600052601160045260246000fd5b60006000198214156117a7576117a761177d565b5060010190565b600082198211156117c1576117c161177d565b500190565b8183823760009101908152919050565b60208152816020820152818360408301376000818301604090810191909152601f909201601f19160101919050565b8051611810816116f4565b919050565b600060a0828403121561182757600080fd5b60405160a0810181811067ffffffffffffffff8211171561185857634e487b7160e01b600052604160045260246000fd5b60405282518152602083015161186d8161152c565b602082015260408301516004811061188457600080fd5b604082015261189560608401611805565b6060820152608083015160808201528091505092915050565b600181811c908216806118c257607f821691505b602082108114156118e357634e487b7160e01b600052602260045260246000fd5b50919050565b600060ff821660ff8114156119005761190061177d565b60010192915050565b600060ff821660ff84168160ff048111821515161561192a5761192a61177d565b029392505050565b6000825161194481846020870161171e565b9190910192915050565b60008161195d5761195d61177d565b506000190190565b60006bffffffffffffffffffffffff19808860601b168352808760601b1660148401525084602883015282846048840137506000910160480190815294935050505056fea26469706673582212209212378f00eb22369355f60c3f77bff3f56980144e36feb067c2e4fecbf5861f64736f6c634300080b0033"};

    public static final String BINARY = org.fisco.bcos.sdk.v3.utils.StringUtils.joinAll("", BINARY_ARRAY);

    public static final String[] SM_BINARY_ARRAY = {"","1f16c023b3e68535b12f9856c9efdc36a873b31ff1873200c246dfb2c14290600090a25050505050565b610e2133611127565b60008181526003602052604090206001600482810154610100900460ff1690811115610e4f57610e4f61160a565b14610e9d57604051636381e58960e11b815260206004820152601a60248201527f496e76616c6964207472616e73616374696f6e20737461747573000000000000604482015260640161020b565b60048101805461ff0019166104001790556040518281527f5058486f68922f5def2ddcf51515b2db34dd9fb76d56609ba4375a8271475aef906020016108b7565b606081610efe5760405163f03d1dc360e01b815260040160405180910390fd5b600554604051631637d7b960e11b81523360048201526000916001600160a01b031690632c6faf729060240160a060405180830381865afa158015610f47573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f6b91906117d7565b9050600281604001516003811115610f8557610f8561160a565b14610fa957805160405163cab14afb60e01b8152600481019190915260240161020b565b60008381526007602052604090208054610fc2906118b9565b159050610fe5576040516320a7ca9160e11b81526004810184905260240161020b565b805160009081526008602090815260409182902054835183519283015281830181905282518083038401815260c0830184526060830187815285516080850152600160a09094019390935292519294509160069061104490869061193d565b9081526020016040518091039020600082015181600001556020820151816001015560408201518160020160006101000a81548160ff021916908360038111156110905761109061160a565b02179055505050600084815260076020908152604090912084516110b692860190611457565b50806110c181611886565b835160009081526008602052604090819020829055519092506110e69150849061193d565b604051908190038120858252907f9479ce40d6f407cf52e986a7c507a955c7e55c90aaf12291e74593e6bff3c8b49060200160405180910390a25050919050565b6001600160a01b03811660009081526020819052604090205460ff166104a457604051636381e58960e11b815260206004820152601360248201527223b7bb1d1024b73b30b634b21031b0b63632b960691b604482015260640161020b565b600085858585856040516020016111a1959493929190611970565b60408051601f1981840301815291905280516020909101209050600080828152600360205260409020600490810154610100900460ff16908111156111e8576111e861160a565b1461123657604051636381e58960e11b815260206004820152601960248201527f5472616e73616374696f6e20616c726561647920657869737400000000000000604482015260640161020b565b60006040518060c00160405280886001600160a01b03168152602001876001600160a01b0316815260200186815260200185858080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920182905250938552505050602082015260400160019052600083815260036020818152604092839020845181546001600160a01b039182166001600160a01b031991821617835583870151600184018054919093169116179055928401516002840155606084015180519495508594611314938501929190910190611457565b5060808201516004808301805460ff90931660ff1984168117825560a086015193919261ffff1990921617906101009084908111156113555761135561160a565b0217905550506040518381527f24ba2a097b8583ceb85c849bc3906addc9c36dddfa40b96449fb65f70b549aca915060200160405180910390a15095945050505050565b5080546113a5906118b9565b6000825580601f106113b5575050565b601f0160209004906000526020600020908101906104a491906114cb565b8280546113df906118b9565b90600052602060002090601f0160209004810192826114015760008555611447565b82601f1061141a5782800160ff19823516178555611447565b82800160010185558215611447579182015b8281111561144757823582559160200191906001019061142c565b506114539291506114cb565b5090565b828054611463906118b9565b90600052602060002090601f0160209004810192826114855760008555611447565b82601f1061149e57805160ff1916838001178555611447565b82800160010185558215611447579182015b828111156114475782518255916020019190600101906114b0565b5b8082111561145357600081556001016114cc565b60008083601f8401126114f257600080fd5b50813567ffffffffffffffff81111561150a57600080fd5b60208301915083602082850101111561152257600080fd5b9250929050565b60008060006040848603121561153e57600080fd5b833567ffffffffffffffff81111561155557600080fd5b611561868287016114e0565b909790965060209590950135949350505050565b6001600160a01b03811681146104a457600080fd5b60006020828403121561159c57600080fd5b81356115a781611575565b9392505050565b600080600080606085870312156115c457600080fd5b84356115cf81611575565b935060208501359250604085013567ffffffffffffffff8111156115f257600080fd5b6115fe878288016114e0565b95989497509550505050565b63b95aa35560e01b600052602160045260246000fd5b60208101600283106116425763b95aa35560e01b600052602160045260246000fd5b91905290565b60006020828403121561165a57600080fd5b5035919050565b600281106104a457600080fd5b60006020828403121561168057600080fd5b81356115a781611661565b6000806000604084860312156116a057600080fd5b833567ffffffffffffffff8111156116b757600080fd5b6116c3868287016114e0565b909450925050602084013580151581146116dc57600080fd5b809150509250925092565b600080602083850312156116fa57600080fd5b823567ffffffffffffffff81111561171157600080fd5b61171d858286016114e0565b90969095509350505050565b60005b8381101561174457818101518382015260200161172c565b83811115610c035750506000910152565b6020815260008251806020840152611774816040850160208701611729565b601f01601f19169190910160400192915050565b8183823760009101908152919050565b60208152816020820152818360408301376000818301604090810191909152601f909201601f19160101919050565b80516117d281611661565b919050565b600060a082840312156117e957600080fd5b60405160a0810181811067ffffffffffffffff8211171561181a5763b95aa35560e01b600052604160045260246000fd5b60405282518152602083015161182f81611575565b602082015260408301516004811061184657600080fd5b6040820152611857606084016117c7565b6060820152608083015160808201528091505092915050565b63b95aa35560e01b600052601160045260246000fd5b600060001982141561189a5761189a611870565b5060010190565b600082198211156118b4576118b4611870565b500190565b600181811c908216806118cd57607f821691505b602082108114156118ee5763b95aa35560e01b600052602260045260246000fd5b50919050565b600060ff821660ff81141561190b5761190b611870565b60010192915050565b600060ff821660ff84168160ff048111821515161561193557611935611870565b029392505050565b6000825161194f818460208701611729565b9190910192915050565b60008161196857611968611870565b506000190190565b60006bffffffffffffffffffffffff19808860601b168352808760601b1660148401525084602883015282846048840137506000910160480190815294935050505056fea2646970667358221220d3f3d46cc64d861c60ef3e536de17c43dc25b8b9c525e2248c41fe2bb32da45a64736f6c634300080b0033"};

    public static final String SM_BINARY = org.fisco.bcos.sdk.v3.utils.StringUtils.joinAll("", SM_BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"accountContract\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"did\",\"type\":\"bytes32\"}],\"name\":\"InvalidAccountStatus\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidCaller\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidHash\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"productId\",\"type\":\"bytes\"}],\"name\":\"InvalidProductStatus\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"productId\",\"type\":\"bytes\"}],\"name\":\"OnlyProductOwnerCanCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"ProductAlreadyCreated\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"productId\",\"type\":\"bytes\"}],\"name\":\"ProductNotExisted\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"proposalId\",\"type\":\"bytes32\"}],\"name\":\"CancelProposal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes\",\"name\":\"productId\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"CreateProduct\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"proposalId\",\"type\":\"bytes32\"}],\"name\":\"CreateProposal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes\",\"name\":\"productId\",\"type\":\"bytes\"}],\"name\":\"DeleteProduct\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"proposalId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"name\":\"ExecuteProposal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes\",\"name\":\"productId\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"ModifyProduct\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes\",\"name\":\"productId\",\"type\":\"bytes\"}],\"name\":\"ProductApproved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes\",\"name\":\"productId\",\"type\":\"bytes\"}],\"name\":\"ProductDenied\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"proposalId\",\"type\":\"bytes32\"}],\"name\":\"VoteProposal\",\"type\":\"event\"},{\"conflictFields\":[{\"kind\":0},{\"kind\":2,\"slot\":0,\"value\":[0]},{\"kind\":2,\"slot\":4,\"value\":[0]},{\"kind\":4,\"value\":[1]},{\"kind\":4,\"value\":[2]}],\"inputs\":[{\"internalType\":\"address\",\"name\":\"governor\",\"type\":\"address\"}],\"name\":\"addGovernor\",\"outputs\":[],\"selector\":[1011492304,224856489],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":0},{\"kind\":2,\"slot\":0,\"value\":[0]},{\"kind\":2,\"slot\":4,\"value\":[0]},{\"kind\":4,\"value\":[2]}],\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"productId\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"agree\",\"type\":\"bool\"}],\"name\":\"approveProduct\",\"outputs\":[],\"selector\":[1596574597,2501836167],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":2,\"slot\":0,\"value\":[0]},{\"kind\":3,\"slot\":3,\"value\":[0]}],\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"proposalId\",\"type\":\"bytes32\"}],\"name\":\"cancelProposal\",\"outputs\":[],\"selector\":[926379176,2940694586],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":0},{\"kind\":2,\"slot\":0,\"value\":[0]},{\"kind\":2,\"slot\":4,\"value\":[0]},{\"kind\":4,\"value\":[2]}],\"inputs\":[{\"internalType\":\"enum GovernModule.GovernMode\",\"name\":\"newMode\",\"type\":\"uint8\"}],\"name\":\"changeMode\",\"outputs\":[],\"selector\":[2775083046,1774458637],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":0},{\"kind\":2,\"slot\":0,\"value\":[0]},{\"kind\":2,\"slot\":4,\"value\":[0]}],\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"createProposal\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"proposalId\",\"type\":\"bytes32\"}],\"selector\":[1357615905,959028584],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":0}],\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"createaProduct\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"productId\",\"type\":\"bytes\"}],\"selector\":[4279657045,3864660845],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":0}],\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"productId\",\"type\":\"bytes\"}],\"name\":\"deleteProduct\",\"outputs\":[],\"selector\":[2665893030,2784611475],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":4,\"value\":[2]}],\"inputs\":[],\"name\":\"mode\",\"outputs\":[{\"internalType\":\"enum GovernModule.GovernMode\",\"name\":\"\",\"type\":\"uint8\"}],\"selector\":[693785106,1032774748],\"stateMutability\":\"view\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":0}],\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"productId\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"modifyProduct\",\"outputs\":[],\"selector\":[1545129480,165731704],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":0},{\"kind\":2,\"slot\":0,\"value\":[0]},{\"kind\":2,\"slot\":4,\"value\":[0]},{\"kind\":4,\"value\":[1]},{\"kind\":4,\"value\":[2]}],\"inputs\":[{\"internalType\":\"address\",\"name\":\"governor\",\"type\":\"address\"}],\"name\":\"removeGovernor\",\"outputs\":[],\"selector\":[4006456456,2398553536],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":0}],\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"proposalId\",\"type\":\"bytes32\"}],\"name\":\"vote\",\"outputs\":[],\"selector\":[2795236026,1620399368],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"};

    public static final String ABI = org.fisco.bcos.sdk.v3.utils.StringUtils.joinAll("", ABI_ARRAY);

    public static final String FUNC_ADDGOVERNOR = "addGovernor";

    public static final String FUNC_APPROVEPRODUCT = "approveProduct";

    public static final String FUNC_CANCELPROPOSAL = "cancelProposal";

    public static final String FUNC_CHANGEMODE = "changeMode";

    public static final String FUNC_CREATEPROPOSAL = "createProposal";

    public static final String FUNC_CREATEAPRODUCT = "createaProduct";

    public static final String FUNC_DELETEPRODUCT = "deleteProduct";

    public static final String FUNC_MODE = "mode";

    public static final String FUNC_MODIFYPRODUCT = "modifyProduct";

    public static final String FUNC_REMOVEGOVERNOR = "removeGovernor";

    public static final String FUNC_VOTE = "vote";

    public static final Event CANCELPROPOSAL_EVENT = new Event("CancelProposal", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
    ;

    public static final Event CREATEPRODUCT_EVENT = new Event("CreateProduct", 
            Arrays.<TypeReference<?>>asList(new TypeReference<DynamicBytes>(true) {}, new TypeReference<Bytes32>() {}));
    ;

    public static final Event CREATEPROPOSAL_EVENT = new Event("CreateProposal", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
    ;

    public static final Event DELETEPRODUCT_EVENT = new Event("DeleteProduct", 
            Arrays.<TypeReference<?>>asList(new TypeReference<DynamicBytes>(true) {}));
    ;

    public static final Event EXECUTEPROPOSAL_EVENT = new Event("ExecuteProposal", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Bool>() {}));
    ;

    public static final Event MODIFYPRODUCT_EVENT = new Event("ModifyProduct", 
            Arrays.<TypeReference<?>>asList(new TypeReference<DynamicBytes>(true) {}, new TypeReference<Bytes32>() {}));
    ;

    public static final Event PRODUCTAPPROVED_EVENT = new Event("ProductApproved", 
            Arrays.<TypeReference<?>>asList(new TypeReference<DynamicBytes>(true) {}));
    ;

    public static final Event PRODUCTDENIED_EVENT = new Event("ProductDenied", 
            Arrays.<TypeReference<?>>asList(new TypeReference<DynamicBytes>(true) {}));
    ;

    public static final Event VOTEPROPOSAL_EVENT = new Event("VoteProposal", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
    ;

    protected ProductModule(String contractAddress, Client client, CryptoKeyPair credential) {
        super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
    }

    public static String getBinary(CryptoSuite cryptoSuite) {
        return (cryptoSuite.getCryptoTypeConfig() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public static String getABI() {
        return ABI;
    }

    public List<CancelProposalEventResponse> getCancelProposalEvents(
            TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(CANCELPROPOSAL_EVENT, transactionReceipt);
        ArrayList<CancelProposalEventResponse> responses = new ArrayList<CancelProposalEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            CancelProposalEventResponse typedResponse = new CancelProposalEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.proposalId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public List<CreateProductEventResponse> getCreateProductEvents(
            TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(CREATEPRODUCT_EVENT, transactionReceipt);
        ArrayList<CreateProductEventResponse> responses = new ArrayList<CreateProductEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            CreateProductEventResponse typedResponse = new CreateProductEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.productId = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.hash = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public List<CreateProposalEventResponse> getCreateProposalEvents(
            TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(CREATEPROPOSAL_EVENT, transactionReceipt);
        ArrayList<CreateProposalEventResponse> responses = new ArrayList<CreateProposalEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            CreateProposalEventResponse typedResponse = new CreateProposalEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.proposalId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public List<DeleteProductEventResponse> getDeleteProductEvents(
            TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(DELETEPRODUCT_EVENT, transactionReceipt);
        ArrayList<DeleteProductEventResponse> responses = new ArrayList<DeleteProductEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            DeleteProductEventResponse typedResponse = new DeleteProductEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.productId = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public List<ExecuteProposalEventResponse> getExecuteProposalEvents(
            TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(EXECUTEPROPOSAL_EVENT, transactionReceipt);
        ArrayList<ExecuteProposalEventResponse> responses = new ArrayList<ExecuteProposalEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            ExecuteProposalEventResponse typedResponse = new ExecuteProposalEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.proposalId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.success = (Boolean) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public List<ModifyProductEventResponse> getModifyProductEvents(
            TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(MODIFYPRODUCT_EVENT, transactionReceipt);
        ArrayList<ModifyProductEventResponse> responses = new ArrayList<ModifyProductEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            ModifyProductEventResponse typedResponse = new ModifyProductEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.productId = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.hash = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public List<ProductApprovedEventResponse> getProductApprovedEvents(
            TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(PRODUCTAPPROVED_EVENT, transactionReceipt);
        ArrayList<ProductApprovedEventResponse> responses = new ArrayList<ProductApprovedEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            ProductApprovedEventResponse typedResponse = new ProductApprovedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.productId = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public List<ProductDeniedEventResponse> getProductDeniedEvents(
            TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(PRODUCTDENIED_EVENT, transactionReceipt);
        ArrayList<ProductDeniedEventResponse> responses = new ArrayList<ProductDeniedEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            ProductDeniedEventResponse typedResponse = new ProductDeniedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.productId = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public List<VoteProposalEventResponse> getVoteProposalEvents(
            TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(VOTEPROPOSAL_EVENT, transactionReceipt);
        ArrayList<VoteProposalEventResponse> responses = new ArrayList<VoteProposalEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            VoteProposalEventResponse typedResponse = new VoteProposalEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.proposalId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public TransactionReceipt addGovernor(String governor) {
        final Function function = new Function(
                FUNC_ADDGOVERNOR, 
                Arrays.<Type>asList(new Address(governor)),
                Collections.<TypeReference<?>>emptyList(), 0);
        return executeTransaction(function);
    }

    public String addGovernor(String governor, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_ADDGOVERNOR, 
                Arrays.<Type>asList(new Address(governor)),
                Collections.<TypeReference<?>>emptyList(), 0);
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForAddGovernor(String governor) {
        final Function function = new Function(
                FUNC_ADDGOVERNOR, 
                Arrays.<Type>asList(new Address(governor)),
                Collections.<TypeReference<?>>emptyList(), 0);
        return createSignedTransaction(function);
    }

    public Tuple1<String> getAddGovernorInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_ADDGOVERNOR, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public TransactionReceipt approveProduct(byte[] productId, Boolean agree) {
        final Function function = new Function(
                FUNC_APPROVEPRODUCT, 
                Arrays.<Type>asList(new DynamicBytes(productId),
                new Bool(agree)),
                Collections.<TypeReference<?>>emptyList(), 0);
        return executeTransaction(function);
    }

    public String approveProduct(byte[] productId, Boolean agree, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_APPROVEPRODUCT, 
                Arrays.<Type>asList(new DynamicBytes(productId),
                new Bool(agree)),
                Collections.<TypeReference<?>>emptyList(), 0);
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForApproveProduct(byte[] productId, Boolean agree) {
        final Function function = new Function(
                FUNC_APPROVEPRODUCT, 
                Arrays.<Type>asList(new DynamicBytes(productId),
                new Bool(agree)),
                Collections.<TypeReference<?>>emptyList(), 0);
        return createSignedTransaction(function);
    }

    public Tuple2<byte[], Boolean> getApproveProductInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_APPROVEPRODUCT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicBytes>() {}, new TypeReference<Bool>() {}));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<byte[], Boolean>(

                (byte[]) results.get(0).getValue(), 
                (Boolean) results.get(1).getValue()
                );
    }

    public TransactionReceipt cancelProposal(byte[] proposalId) {
        final Function function = new Function(
                FUNC_CANCELPROPOSAL, 
                Arrays.<Type>asList(new Bytes32(proposalId)),
                Collections.<TypeReference<?>>emptyList(), 4);
        return executeTransaction(function);
    }

    public String cancelProposal(byte[] proposalId, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_CANCELPROPOSAL, 
                Arrays.<Type>asList(new Bytes32(proposalId)),
                Collections.<TypeReference<?>>emptyList(), 4);
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForCancelProposal(byte[] proposalId) {
        final Function function = new Function(
                FUNC_CANCELPROPOSAL, 
                Arrays.<Type>asList(new Bytes32(proposalId)),
                Collections.<TypeReference<?>>emptyList(), 4);
        return createSignedTransaction(function);
    }

    public Tuple1<byte[]> getCancelProposalInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_CANCELPROPOSAL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<byte[]>(

                (byte[]) results.get(0).getValue()
                );
    }

    public TransactionReceipt changeMode(BigInteger newMode) {
        final Function function = new Function(
                FUNC_CHANGEMODE, 
                Arrays.<Type>asList(new Uint8(newMode)),
                Collections.<TypeReference<?>>emptyList(), 0);
        return executeTransaction(function);
    }

    public String changeMode(BigInteger newMode, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_CHANGEMODE, 
                Arrays.<Type>asList(new Uint8(newMode)),
                Collections.<TypeReference<?>>emptyList(), 0);
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForChangeMode(BigInteger newMode) {
        final Function function = new Function(
                FUNC_CHANGEMODE, 
                Arrays.<Type>asList(new Uint8(newMode)),
                Collections.<TypeReference<?>>emptyList(), 0);
        return createSignedTransaction(function);
    }

    public Tuple1<BigInteger> getChangeModeInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_CHANGEMODE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public TransactionReceipt createProposal(String to, BigInteger nonce, byte[] data) {
        final Function function = new Function(
                FUNC_CREATEPROPOSAL, 
                Arrays.<Type>asList(new Address(to),
                new Uint256(nonce),
                new DynamicBytes(data)),
                Collections.<TypeReference<?>>emptyList(), 0);
        return executeTransaction(function);
    }

    public String createProposal(String to, BigInteger nonce, byte[] data,
            TransactionCallback callback) {
        final Function function = new Function(
                FUNC_CREATEPROPOSAL, 
                Arrays.<Type>asList(new Address(to),
                new Uint256(nonce),
                new DynamicBytes(data)),
                Collections.<TypeReference<?>>emptyList(), 0);
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForCreateProposal(String to, BigInteger nonce, byte[] data) {
        final Function function = new Function(
                FUNC_CREATEPROPOSAL, 
                Arrays.<Type>asList(new Address(to),
                new Uint256(nonce),
                new DynamicBytes(data)),
                Collections.<TypeReference<?>>emptyList(), 0);
        return createSignedTransaction(function);
    }

    public Tuple3<String, BigInteger, byte[]> getCreateProposalInput(
            TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_CREATEPROPOSAL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<DynamicBytes>() {}));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, BigInteger, byte[]>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue(), 
                (byte[]) results.get(2).getValue()
                );
    }

    public Tuple1<byte[]> getCreateProposalOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_CREATEPROPOSAL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<byte[]>(

                (byte[]) results.get(0).getValue()
                );
    }

    public TransactionReceipt createaProduct(byte[] hash) {
        final Function function = new Function(
                FUNC_CREATEAPRODUCT, 
                Arrays.<Type>asList(new Bytes32(hash)),
                Collections.<TypeReference<?>>emptyList(), 0);
        return executeTransaction(function);
    }

    public String createaProduct(byte[] hash, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_CREATEAPRODUCT, 
                Arrays.<Type>asList(new Bytes32(hash)),
                Collections.<TypeReference<?>>emptyList(), 0);
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForCreateaProduct(byte[] hash) {
        final Function function = new Function(
                FUNC_CREATEAPRODUCT, 
                Arrays.<Type>asList(new Bytes32(hash)),
                Collections.<TypeReference<?>>emptyList(), 0);
        return createSignedTransaction(function);
    }

    public Tuple1<byte[]> getCreateaProductInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_CREATEAPRODUCT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<byte[]>(

                (byte[]) results.get(0).getValue()
                );
    }

    public Tuple1<byte[]> getCreateaProductOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_CREATEAPRODUCT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicBytes>() {}));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<byte[]>(

                (byte[]) results.get(0).getValue()
                );
    }

    public TransactionReceipt deleteProduct(byte[] productId) {
        final Function function = new Function(
                FUNC_DELETEPRODUCT, 
                Arrays.<Type>asList(new DynamicBytes(productId)),
                Collections.<TypeReference<?>>emptyList(), 0);
        return executeTransaction(function);
    }

    public String deleteProduct(byte[] productId, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_DELETEPRODUCT, 
                Arrays.<Type>asList(new DynamicBytes(productId)),
                Collections.<TypeReference<?>>emptyList(), 0);
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForDeleteProduct(byte[] productId) {
        final Function function = new Function(
                FUNC_DELETEPRODUCT, 
                Arrays.<Type>asList(new DynamicBytes(productId)),
                Collections.<TypeReference<?>>emptyList(), 0);
        return createSignedTransaction(function);
    }

    public Tuple1<byte[]> getDeleteProductInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_DELETEPRODUCT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicBytes>() {}));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<byte[]>(

                (byte[]) results.get(0).getValue()
                );
    }

    public BigInteger mode() throws ContractException {
        final Function function = new Function(FUNC_MODE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public TransactionReceipt modifyProduct(byte[] productId, byte[] hash) {
        final Function function = new Function(
                FUNC_MODIFYPRODUCT, 
                Arrays.<Type>asList(new DynamicBytes(productId),
                new Bytes32(hash)),
                Collections.<TypeReference<?>>emptyList(), 0);
        return executeTransaction(function);
    }

    public String modifyProduct(byte[] productId, byte[] hash, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_MODIFYPRODUCT, 
                Arrays.<Type>asList(new DynamicBytes(productId),
                new Bytes32(hash)),
                Collections.<TypeReference<?>>emptyList(), 0);
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForModifyProduct(byte[] productId, byte[] hash) {
        final Function function = new Function(
                FUNC_MODIFYPRODUCT, 
                Arrays.<Type>asList(new DynamicBytes(productId),
                new Bytes32(hash)),
                Collections.<TypeReference<?>>emptyList(), 0);
        return createSignedTransaction(function);
    }

    public Tuple2<byte[], byte[]> getModifyProductInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_MODIFYPRODUCT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicBytes>() {}, new TypeReference<Bytes32>() {}));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<byte[], byte[]>(

                (byte[]) results.get(0).getValue(), 
                (byte[]) results.get(1).getValue()
                );
    }

    public TransactionReceipt removeGovernor(String governor) {
        final Function function = new Function(
                FUNC_REMOVEGOVERNOR, 
                Arrays.<Type>asList(new Address(governor)),
                Collections.<TypeReference<?>>emptyList(), 0);
        return executeTransaction(function);
    }

    public String removeGovernor(String governor, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_REMOVEGOVERNOR, 
                Arrays.<Type>asList(new Address(governor)),
                Collections.<TypeReference<?>>emptyList(), 0);
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForRemoveGovernor(String governor) {
        final Function function = new Function(
                FUNC_REMOVEGOVERNOR, 
                Arrays.<Type>asList(new Address(governor)),
                Collections.<TypeReference<?>>emptyList(), 0);
        return createSignedTransaction(function);
    }

    public Tuple1<String> getRemoveGovernorInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_REMOVEGOVERNOR, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public TransactionReceipt vote(byte[] proposalId) {
        final Function function = new Function(
                FUNC_VOTE, 
                Arrays.<Type>asList(new Bytes32(proposalId)),
                Collections.<TypeReference<?>>emptyList(), 0);
        return executeTransaction(function);
    }

    public String vote(byte[] proposalId, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_VOTE, 
                Arrays.<Type>asList(new Bytes32(proposalId)),
                Collections.<TypeReference<?>>emptyList(), 0);
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForVote(byte[] proposalId) {
        final Function function = new Function(
                FUNC_VOTE, 
                Arrays.<Type>asList(new Bytes32(proposalId)),
                Collections.<TypeReference<?>>emptyList(), 0);
        return createSignedTransaction(function);
    }

    public Tuple1<byte[]> getVoteInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_VOTE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<byte[]>(

                (byte[]) results.get(0).getValue()
                );
    }

    public static ProductModule load(String contractAddress, Client client,
            CryptoKeyPair credential) {
        return new ProductModule(contractAddress, client, credential);
    }

    public static ProductModule deploy(Client client, CryptoKeyPair credential, String _governor,
            String accountContract) throws ContractException {
        byte[] encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new Address(_governor),
                new Address(accountContract)));
        return deploy(ProductModule.class, client, credential, getBinary(client.getCryptoSuite()), getABI(), encodedConstructor, null);
    }

    public static class CancelProposalEventResponse {
        public TransactionReceipt.Logs log;

        public byte[] proposalId;
    }

    public static class CreateProductEventResponse {
        public TransactionReceipt.Logs log;

        public byte[] productId;

        public byte[] hash;
    }

    public static class CreateProposalEventResponse {
        public TransactionReceipt.Logs log;

        public byte[] proposalId;
    }

    public static class DeleteProductEventResponse {
        public TransactionReceipt.Logs log;

        public byte[] productId;
    }

    public static class ExecuteProposalEventResponse {
        public TransactionReceipt.Logs log;

        public byte[] proposalId;

        public Boolean success;
    }

    public static class ModifyProductEventResponse {
        public TransactionReceipt.Logs log;

        public byte[] productId;

        public byte[] hash;
    }

    public static class ProductApprovedEventResponse {
        public TransactionReceipt.Logs log;

        public byte[] productId;
    }

    public static class ProductDeniedEventResponse {
        public TransactionReceipt.Logs log;

        public byte[] productId;
    }

    public static class VoteProposalEventResponse {
        public TransactionReceipt.Logs log;

        public byte[] proposalId;
    }
}
