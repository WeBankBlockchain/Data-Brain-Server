package com.webank.databrain.blockchain;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.fisco.bcos.sdk.v3.client.Client;
import org.fisco.bcos.sdk.v3.codec.abi.FunctionEncoder;
import org.fisco.bcos.sdk.v3.codec.datatypes.Address;
import org.fisco.bcos.sdk.v3.codec.datatypes.Bool;
import org.fisco.bcos.sdk.v3.codec.datatypes.DynamicBytes;
import org.fisco.bcos.sdk.v3.codec.datatypes.Event;
import org.fisco.bcos.sdk.v3.codec.datatypes.Function;
import org.fisco.bcos.sdk.v3.codec.datatypes.Type;
import org.fisco.bcos.sdk.v3.codec.datatypes.TypeReference;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.Bytes32;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint256;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint8;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.tuples.generated.Tuple1;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.tuples.generated.Tuple2;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.tuples.generated.Tuple3;
import org.fisco.bcos.sdk.v3.contract.Contract;
import org.fisco.bcos.sdk.v3.crypto.CryptoSuite;
import org.fisco.bcos.sdk.v3.crypto.keypair.CryptoKeyPair;
import org.fisco.bcos.sdk.v3.model.CryptoType;
import org.fisco.bcos.sdk.v3.model.TransactionReceipt;
import org.fisco.bcos.sdk.v3.model.callback.TransactionCallback;
import org.fisco.bcos.sdk.v3.transaction.model.exception.ContractException;

@SuppressWarnings("unchecked")
public class ProductModule extends Contract {
    public static final String[] BINARY_ARRAY = {"","8311610de157829003601f168201915b505050918352505060048281015460ff80821660208501526040909301926101009091041690811115610e3357610e33611574565b6004811115610e4457610e44611574565b905250905060018160a001516004811115610e6157610e61611574565b14610eae5760405162461bcd60e51b815260206004820152601a60248201527f496e76616c6964207472616e73616374696f6e20737461747573000000000000604482015260640161022c565b60808101805190610ebe82611a0c565b60ff169052506001546080820151610ed7906002611a2c565b60ff1610610fc457602081015160608201516040516000906001600160a01b03841690610f059084906119ce565b6000604051808303816000865af19150503d8060008114610f42576040519150601f19603f3d011682016040523d82523d6000602084013e610f47565b606091505b5050905080610f57576003610f5a565b60025b8460a001906004811115610f7057610f70611574565b90816004811115610f8357610f83611574565b9052506040805186815282151560208201527f3b35e7d1d39c6fa4f9cc7acf876c5c3a01117f7b10f456540321277c95fa07a7910160405180910390a15050505b600082815260036020818152604092839020845181546001600160a01b039182166001600160a01b03199182161783558387015160018401805491909316911617905592840151600284015560608401518051859493611029939085019201906114eb565b5060808201516004808301805460ff90931660ff1984168117825560a086015193919261ffff19909216179061010090849081111561106a5761106a611574565b0217905550506040518381527f4973d6156c5324170079a1bf6e22313bedcf5baf0b036efbd1a7e6e9ec4369609150602001610272565b33301415611136576001600160a01b03811660009081526020819052604090205460ff166111085760405162461bcd60e51b815260206004820152601460248201527311dbdd995c9b9bdc881b9bdd08195e1a5cdd195960621b604482015260640161022c565b6001600160a01b0381166000908152602081905260408120805460ff19169055600180549161031c83611a55565b61113f336111bd565b600060025460ff16600181111561115857611158611574565b14156103b0576001600160a01b03811660009081526020819052604090205460ff166111085760405162461bcd60e51b815260206004820152601460248201527311dbdd995c9b9bdc881b9bdd08195e1a5cdd195960621b604482015260640161022c565b6001600160a01b03811660009081526020819052604090205460ff166103ef5760405162461bcd60e51b815260206004820152601360248201527223b7bb1d1024b73b30b634b21031b0b63632b960691b604482015260640161022c565b60008585858585604051602001611236959493929190611a6c565b60408051601f1981840301815291905280516020909101209050600080828152600360205260409020600490810154610100900460ff169081111561127d5761127d611574565b146112ca5760405162461bcd60e51b815260206004820152601960248201527f5472616e73616374696f6e20616c726561647920657869737400000000000000604482015260640161022c565b60006040518060c00160405280886001600160a01b03168152602001876001600160a01b0316815260200186815260200185858080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920182905250938552505050602082015260400160019052600083815260036020818152604092839020845181546001600160a01b039182166001600160a01b0319918216178355838701516001840180549190931691161790559284015160028401556060840151805194955085946113a89385019291909101906114eb565b5060808201516004808301805460ff90931660ff1984168117825560a086015193919261ffff1990921617906101009084908111156113e9576113e9611574565b0217905550506040518381527f2d231481d8c1af3958a30a257e93e0df6b089bc07ebedc0a86e7355d1aaf1338915060200160405180910390a15095945050505050565b50805461143990611993565b6000825580601f10611449575050565b601f0160209004906000526020600020908101906103ef919061155f565b82805461147390611993565b90600052602060002090601f01602090048101928261149557600085556114db565b82601f106114ae5782800160ff198235161785556114db565b828001600101855582156114db579182015b828111156114db5782358255916020019190600101906114c0565b506114e792915061155f565b5090565b8280546114f790611993565b90600052602060002090601f01602090048101928261151957600085556114db565b82601f1061153257805160ff19168380011785556114db565b828001600101855582156114db579182015b828111156114db578251825591602001919060010190611544565b5b808211156114e75760008155600101611560565b634e487b7160e01b600052602160045260246000fd5b60208101600283106115ac57634e487b7160e01b600052602160045260246000fd5b91905290565b6000602082840312156115c457600080fd5b5035919050565b6001600160a01b03811681146103ef57600080fd5b6000602082840312156115f257600080fd5b81356115fd816115cb565b9392505050565b60008083601f84011261161657600080fd5b50813567ffffffffffffffff81111561162e57600080fd5b60208301915083602082850101111561164657600080fd5b9250929050565b6000806000806060858703121561166357600080fd5b843561166e816115cb565b935060208501359250604085013567ffffffffffffffff81111561169157600080fd5b61169d87828801611604565b95989497509550505050565b6000806000604084860312156116be57600080fd5b833567ffffffffffffffff8111156116d557600080fd5b6116e186828701611604565b909790965060209590950135949350505050565b60008060006040848603121561170a57600080fd5b833567ffffffffffffffff81111561172157600080fd5b61172d86828701611604565b9094509250506020840135801515811461174657600080fd5b809150509250925092565b60005b8381101561176c578181015183820152602001611754565b838111156107605750506000910152565b60008151808452611795816020860160208601611751565b601f01601f19169290920160200192915050565b6020815260006115fd602083018461177d565b600080602083850312156117cf57600080fd5b823567ffffffffffffffff8111156117e657600080fd5b6117f285828601611604565b90969095509350505050565b600281106103ef57600080fd5b60006020828403121561181d57600080fd5b81356115fd816117fe565b634e487b7160e01b600052601160045260246000fd5b600060001982141561185257611852611828565b5060010190565b6000821982111561186c5761186c611828565b500190565b8183823760009101908152919050565b805161188c816117fe565b919050565b600060a082840312156118a357600080fd5b60405160a0810181811067ffffffffffffffff821117156118d457634e487b7160e01b600052604160045260246000fd5b6040528251815260208301516118e9816115cb565b602082015260408301516004811061190057600080fd5b604082015261191160608401611881565b6060820152608083015160808201528091505092915050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b60408152600061196760408301858761192a565b9050826020830152949350505050565b60208152600061198b60208301848661192a565b949350505050565b600181811c908216806119a757607f821691505b602082108114156119c857634e487b7160e01b600052602260045260246000fd5b50919050565b600082516119e0818460208701611751565b9190910192915050565b6040815260006119fd604083018561177d565b90508260208301529392505050565b600060ff821660ff811415611a2357611a23611828565b60010192915050565b600060ff821660ff84168160ff0481118215151615611a4d57611a4d611828565b029392505050565b600081611a6457611a64611828565b506000190190565b60006bffffffffffffffffffffffff19808860601b168352808760601b1660148401525084602883015282846048840137506000910160480190815294935050505056fea2646970667358221220bbc0998c28c2ccbdabc794b8ad56c6eaff99ad626d15e79321796dd38d0529ec64736f6c634300080b0033"};

    public static final String BINARY = org.fisco.bcos.sdk.v3.utils.StringUtils.joinAll("", BINARY_ARRAY);

    public static final String[] SM_BINARY_ARRAY = {"","206000808255600182018190556002909101805460ff1916905583815260079092528120610e1b9161143b565b7feb201f16c023b3e68535b12f9856c9efdc36a873b31ff1873200c246dfb2c1428585604051610e4c929190611a3c565b60405180910390a15050505050565b610e64336111c9565b60008181526003602052604090206001600482810154610100900460ff1690811115610e9257610e926116ac565b14610ee057604051636381e58960e11b815260206004820152601a60248201527f496e76616c6964207472616e73616374696f6e207374617475730000000000006044820152606401610229565b60048101805461ff0019166104001790556040518281527f5058486f68922f5def2ddcf51515b2db34dd9fb76d56609ba4375a8271475aef906020016108e9565b606081610f6057604051636381e58960e11b815260206004820152600c60248201526b092dcecc2d8d2c840d0c2e6d60a31b6044820152606401610229565b600554604051631637d7b960e11b81523360048201526000916001600160a01b031690632c6faf729060240160a060405180830381865afa158015610fa9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fcd9190611856565b9050600281604001516003811115610fe757610fe76116ac565b1461102c57604051636381e58960e11b8152602060048201526014602482015273696e76616c6964206f776e65722073746174757360601b6044820152606401610229565b6000838152600760205260409020805461104590611985565b15905061109557604051636381e58960e11b815260206004820152601760248201527f70726f6475637420616c726561647920637265617465640000000000000000006044820152606401610229565b805160009081526008602090815260409182902054835183519283015281830181905282518083038401815260c0830184526060830187815285516080850152600160a0909401939093529251929450916006906110f4908690611a09565b9081526020016040518091039020600082015181600001556020820151816001015560408201518160020160006101000a81548160ff02191690836003811115611140576111406116ac565b0217905550505060008481526007602090815260409091208451611166928601906114f9565b508061117181611952565b835160009081526008602052604090819020829055519092507f9479ce40d6f407cf52e986a7c507a955c7e55c90aaf12291e74593e6bff3c8b491506111ba9085908790611a58565b60405180910390a15050919050565b6001600160a01b03811660009081526020819052604090205460ff166104d657604051636381e58960e11b815260206004820152601360248201527223b7bb1d1024b73b30b634b21031b0b63632b960691b6044820152606401610229565b60008585858585604051602001611243959493929190611a7a565b60408051601f1981840301815291905280516020909101209050600080828152600360205260409020600490810154610100900460ff169081111561128a5761128a6116ac565b146112d857604051636381e58960e11b815260206004820152601960248201527f5472616e73616374696f6e20616c7265616479206578697374000000000000006044820152606401610229565b60006040518060c00160405280886001600160a01b03168152602001876001600160a01b0316815260200186815260200185858080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920182905250938552505050602082015260400160019052600083815260036020818152604092839020845181546001600160a01b039182166001600160a01b0319918216178355838701516001840180549190931691161790559284015160028401556060840151805194955085946113b69385019291909101906114f9565b5060808201516004808301805460ff90931660ff1984168117825560a086015193919261ffff1990921617906101009084908111156113f7576113f76116ac565b0217905550506040518381527f24ba2a097b8583ceb85c849bc3906addc9c36dddfa40b96449fb65f70b549aca915060200160405180910390a15095945050505050565b50805461144790611985565b6000825580601f10611457575050565b601f0160209004906000526020600020908101906104d6919061156d565b82805461148190611985565b90600052602060002090601f0160209004810192826114a357600085556114e9565b82601f106114bc5782800160ff198235161785556114e9565b828001600101855582156114e9579182015b828111156114e95782358255916020019190600101906114ce565b506114f592915061156d565b5090565b82805461150590611985565b90600052602060002090601f01602090048101928261152757600085556114e9565b82601f1061154057805160ff19168380011785556114e9565b828001600101855582156114e9579182015b828111156114e9578251825591602001919060010190611552565b5b808211156114f5576000815560010161156e565b60008083601f84011261159457600080fd5b50813567ffffffffffffffff8111156115ac57600080fd5b6020830191508360208285010111156115c457600080fd5b9250929050565b6000806000604084860312156115e057600080fd5b833567ffffffffffffffff8111156115f757600080fd5b61160386828701611582565b909790965060209590950135949350505050565b6001600160a01b03811681146104d657600080fd5b60006020828403121561163e57600080fd5b813561164981611617565b9392505050565b6000806000806060858703121561166657600080fd5b843561167181611617565b935060208501359250604085013567ffffffffffffffff81111561169457600080fd5b6116a087828801611582565b95989497509550505050565b63b95aa35560e01b600052602160045260246000fd5b60208101600283106116e45763b95aa35560e01b600052602160045260246000fd5b91905290565b6000602082840312156116fc57600080fd5b5035919050565b600281106104d657600080fd5b60006020828403121561172257600080fd5b813561164981611703565b60008060006040848603121561174257600080fd5b833567ffffffffffffffff81111561175957600080fd5b61176586828701611582565b9094509250506020840135801515811461177e57600080fd5b809150509250925092565b6000806020838503121561179c57600080fd5b823567ffffffffffffffff8111156117b357600080fd5b6117bf85828601611582565b90969095509350505050565b60005b838110156117e65781810151838201526020016117ce565b83811115610c085750506000910152565b6000815180845261180f8160208601602086016117cb565b601f01601f19169290920160200192915050565b60208152600061164960208301846117f7565b8183823760009101908152919050565b805161185181611703565b919050565b600060a0828403121561186857600080fd5b60405160a0810181811067ffffffffffffffff821117156118995763b95aa35560e01b600052604160045260246000fd5b6040528251815260208301516118ae81611617565b60208201526040830151600481106118c557600080fd5b60408201526118d660608401611846565b6060820152608083015160808201528091505092915050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b60408152600061192c6040830185876118ef565b9050826020830152949350505050565b63b95aa35560e01b600052601160045260246000fd5b60006000198214156119665761196661193c565b5060010190565b600082198211156119805761198061193c565b500190565b600181811c9082168061199957607f821691505b602082108114156119ba5763b95aa35560e01b600052602260045260246000fd5b50919050565b600060ff821660ff8114156119d7576119d761193c565b60010192915050565b600060ff821660ff84168160ff0481118215151615611a0157611a0161193c565b029392505050565b60008251611a1b8184602087016117cb565b9190910192915050565b600081611a3457611a3461193c565b506000190190565b602081526000611a506020830184866118ef565b949350505050565b604081526000611a6b60408301856117f7565b90508260208301529392505050565b60006bffffffffffffffffffffffff19808860601b168352808760601b1660148401525084602883015282846048840137506000910160480190815294935050505056fea26469706673582212207bedb6804fe6cea12fbffbef5125247398ffc761a63b9ff82e2b40fec575f00264736f6c634300080b0033"};

    public static final String SM_BINARY = org.fisco.bcos.sdk.v3.utils.StringUtils.joinAll("", SM_BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"accountContract\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"proposalId\",\"type\":\"bytes32\"}],\"name\":\"CancelProposal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"productId\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"CreateProduct\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"proposalId\",\"type\":\"bytes32\"}],\"name\":\"CreateProposal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"productId\",\"type\":\"bytes\"}],\"name\":\"DeleteProduct\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"proposalId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"name\":\"ExecuteProposal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"productId\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"ModifyProduct\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"productId\",\"type\":\"bytes\"}],\"name\":\"ProductApproved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"productId\",\"type\":\"bytes\"}],\"name\":\"ProductDenied\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"proposalId\",\"type\":\"bytes32\"}],\"name\":\"VoteProposal\",\"type\":\"event\"},{\"conflictFields\":[{\"kind\":0},{\"kind\":2,\"slot\":0,\"value\":[0]},{\"kind\":2,\"slot\":4,\"value\":[0]},{\"kind\":4,\"value\":[1]},{\"kind\":4,\"value\":[2]}],\"inputs\":[{\"internalType\":\"address\",\"name\":\"governor\",\"type\":\"address\"}],\"name\":\"addGovernor\",\"outputs\":[],\"selector\":[1011492304,224856489],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":0},{\"kind\":2,\"slot\":0,\"value\":[0]},{\"kind\":2,\"slot\":4,\"value\":[0]},{\"kind\":4,\"value\":[2]}],\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"productId\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"agree\",\"type\":\"bool\"}],\"name\":\"approveProduct\",\"outputs\":[],\"selector\":[1596574597,2501836167],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":2,\"slot\":0,\"value\":[0]},{\"kind\":3,\"slot\":3,\"value\":[0]}],\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"proposalId\",\"type\":\"bytes32\"}],\"name\":\"cancelProposal\",\"outputs\":[],\"selector\":[926379176,2940694586],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":0},{\"kind\":2,\"slot\":0,\"value\":[0]},{\"kind\":2,\"slot\":4,\"value\":[0]},{\"kind\":4,\"value\":[2]}],\"inputs\":[{\"internalType\":\"enum GovernModule.GovernMode\",\"name\":\"newMode\",\"type\":\"uint8\"}],\"name\":\"changeMode\",\"outputs\":[],\"selector\":[2775083046,1774458637],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":0}],\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"createProduct\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"productId\",\"type\":\"bytes\"}],\"selector\":[2647437151,3697913545],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":0},{\"kind\":2,\"slot\":0,\"value\":[0]},{\"kind\":2,\"slot\":4,\"value\":[0]}],\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"createProposal\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"proposalId\",\"type\":\"bytes32\"}],\"selector\":[1357615905,959028584],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":0}],\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"productId\",\"type\":\"bytes\"}],\"name\":\"deleteProduct\",\"outputs\":[],\"selector\":[2665893030,2784611475],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":4,\"value\":[2]}],\"inputs\":[],\"name\":\"mode\",\"outputs\":[{\"internalType\":\"enum GovernModule.GovernMode\",\"name\":\"\",\"type\":\"uint8\"}],\"selector\":[693785106,1032774748],\"stateMutability\":\"view\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":0}],\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"productId\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"modifyProduct\",\"outputs\":[],\"selector\":[1545129480,165731704],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":0},{\"kind\":2,\"slot\":0,\"value\":[0]},{\"kind\":2,\"slot\":4,\"value\":[0]},{\"kind\":4,\"value\":[1]},{\"kind\":4,\"value\":[2]}],\"inputs\":[{\"internalType\":\"address\",\"name\":\"governor\",\"type\":\"address\"}],\"name\":\"removeGovernor\",\"outputs\":[],\"selector\":[4006456456,2398553536],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":0}],\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"proposalId\",\"type\":\"bytes32\"}],\"name\":\"vote\",\"outputs\":[],\"selector\":[2795236026,1620399368],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"};

    public static final String ABI = org.fisco.bcos.sdk.v3.utils.StringUtils.joinAll("", ABI_ARRAY);

    public static final String FUNC_ADDGOVERNOR = "addGovernor";

    public static final String FUNC_APPROVEPRODUCT = "approveProduct";

    public static final String FUNC_CANCELPROPOSAL = "cancelProposal";

    public static final String FUNC_CHANGEMODE = "changeMode";

    public static final String FUNC_CREATEPRODUCT = "createProduct";

    public static final String FUNC_CREATEPROPOSAL = "createProposal";

    public static final String FUNC_DELETEPRODUCT = "deleteProduct";

    public static final String FUNC_MODE = "mode";

    public static final String FUNC_MODIFYPRODUCT = "modifyProduct";

    public static final String FUNC_REMOVEGOVERNOR = "removeGovernor";

    public static final String FUNC_VOTE = "vote";

    public static final Event CANCELPROPOSAL_EVENT = new Event("CancelProposal", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
    ;

    public static final Event CREATEPRODUCT_EVENT = new Event("CreateProduct", 
            Arrays.<TypeReference<?>>asList(new TypeReference<DynamicBytes>() {}, new TypeReference<Bytes32>() {}));
    ;

    public static final Event CREATEPROPOSAL_EVENT = new Event("CreateProposal", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
    ;

    public static final Event DELETEPRODUCT_EVENT = new Event("DeleteProduct", 
            Arrays.<TypeReference<?>>asList(new TypeReference<DynamicBytes>() {}));
    ;

    public static final Event EXECUTEPROPOSAL_EVENT = new Event("ExecuteProposal", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Bool>() {}));
    ;

    public static final Event MODIFYPRODUCT_EVENT = new Event("ModifyProduct", 
            Arrays.<TypeReference<?>>asList(new TypeReference<DynamicBytes>() {}, new TypeReference<Bytes32>() {}));
    ;

    public static final Event PRODUCTAPPROVED_EVENT = new Event("ProductApproved", 
            Arrays.<TypeReference<?>>asList(new TypeReference<DynamicBytes>() {}));
    ;

    public static final Event PRODUCTDENIED_EVENT = new Event("ProductDenied", 
            Arrays.<TypeReference<?>>asList(new TypeReference<DynamicBytes>() {}));
    ;

    public static final Event VOTEPROPOSAL_EVENT = new Event("VoteProposal", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
    ;

    protected ProductModule(String contractAddress, Client client, CryptoKeyPair credential) {
        super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
    }

    public static String getBinary(CryptoSuite cryptoSuite) {
        return (cryptoSuite.getCryptoTypeConfig() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public static String getABI() {
        return ABI;
    }

    public List<CancelProposalEventResponse> getCancelProposalEvents(
            TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(CANCELPROPOSAL_EVENT, transactionReceipt);
        ArrayList<CancelProposalEventResponse> responses = new ArrayList<CancelProposalEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            CancelProposalEventResponse typedResponse = new CancelProposalEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.proposalId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public List<CreateProductEventResponse> getCreateProductEvents(
            TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(CREATEPRODUCT_EVENT, transactionReceipt);
        ArrayList<CreateProductEventResponse> responses = new ArrayList<CreateProductEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            CreateProductEventResponse typedResponse = new CreateProductEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.productId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.hash = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public List<CreateProposalEventResponse> getCreateProposalEvents(
            TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(CREATEPROPOSAL_EVENT, transactionReceipt);
        ArrayList<CreateProposalEventResponse> responses = new ArrayList<CreateProposalEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            CreateProposalEventResponse typedResponse = new CreateProposalEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.proposalId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public List<DeleteProductEventResponse> getDeleteProductEvents(
            TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(DELETEPRODUCT_EVENT, transactionReceipt);
        ArrayList<DeleteProductEventResponse> responses = new ArrayList<DeleteProductEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            DeleteProductEventResponse typedResponse = new DeleteProductEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.productId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public List<ExecuteProposalEventResponse> getExecuteProposalEvents(
            TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(EXECUTEPROPOSAL_EVENT, transactionReceipt);
        ArrayList<ExecuteProposalEventResponse> responses = new ArrayList<ExecuteProposalEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            ExecuteProposalEventResponse typedResponse = new ExecuteProposalEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.proposalId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.success = (Boolean) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public List<ModifyProductEventResponse> getModifyProductEvents(
            TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(MODIFYPRODUCT_EVENT, transactionReceipt);
        ArrayList<ModifyProductEventResponse> responses = new ArrayList<ModifyProductEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            ModifyProductEventResponse typedResponse = new ModifyProductEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.productId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.hash = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public List<ProductApprovedEventResponse> getProductApprovedEvents(
            TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(PRODUCTAPPROVED_EVENT, transactionReceipt);
        ArrayList<ProductApprovedEventResponse> responses = new ArrayList<ProductApprovedEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            ProductApprovedEventResponse typedResponse = new ProductApprovedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.productId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public List<ProductDeniedEventResponse> getProductDeniedEvents(
            TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(PRODUCTDENIED_EVENT, transactionReceipt);
        ArrayList<ProductDeniedEventResponse> responses = new ArrayList<ProductDeniedEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            ProductDeniedEventResponse typedResponse = new ProductDeniedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.productId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public List<VoteProposalEventResponse> getVoteProposalEvents(
            TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(VOTEPROPOSAL_EVENT, transactionReceipt);
        ArrayList<VoteProposalEventResponse> responses = new ArrayList<VoteProposalEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            VoteProposalEventResponse typedResponse = new VoteProposalEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.proposalId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public TransactionReceipt addGovernor(String governor) {
        final Function function = new Function(
                FUNC_ADDGOVERNOR, 
                Arrays.<Type>asList(new Address(governor)),
                Collections.<TypeReference<?>>emptyList(), 0);
        return executeTransaction(function);
    }

    public String addGovernor(String governor, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_ADDGOVERNOR, 
                Arrays.<Type>asList(new Address(governor)),
                Collections.<TypeReference<?>>emptyList(), 0);
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForAddGovernor(String governor) {
        final Function function = new Function(
                FUNC_ADDGOVERNOR, 
                Arrays.<Type>asList(new Address(governor)),
                Collections.<TypeReference<?>>emptyList(), 0);
        return createSignedTransaction(function);
    }

    public Tuple1<String> getAddGovernorInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_ADDGOVERNOR, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public TransactionReceipt approveProduct(byte[] productId, Boolean agree) {
        final Function function = new Function(
                FUNC_APPROVEPRODUCT, 
                Arrays.<Type>asList(new DynamicBytes(productId),
                new Bool(agree)),
                Collections.<TypeReference<?>>emptyList(), 0);
        return executeTransaction(function);
    }

    public String approveProduct(byte[] productId, Boolean agree, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_APPROVEPRODUCT, 
                Arrays.<Type>asList(new DynamicBytes(productId),
                new Bool(agree)),
                Collections.<TypeReference<?>>emptyList(), 0);
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForApproveProduct(byte[] productId, Boolean agree) {
        final Function function = new Function(
                FUNC_APPROVEPRODUCT, 
                Arrays.<Type>asList(new DynamicBytes(productId),
                new Bool(agree)),
                Collections.<TypeReference<?>>emptyList(), 0);
        return createSignedTransaction(function);
    }

    public Tuple2<byte[], Boolean> getApproveProductInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_APPROVEPRODUCT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicBytes>() {}, new TypeReference<Bool>() {}));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<byte[], Boolean>(

                (byte[]) results.get(0).getValue(), 
                (Boolean) results.get(1).getValue()
                );
    }

    public TransactionReceipt cancelProposal(byte[] proposalId) {
        final Function function = new Function(
                FUNC_CANCELPROPOSAL, 
                Arrays.<Type>asList(new Bytes32(proposalId)),
                Collections.<TypeReference<?>>emptyList(), 4);
        return executeTransaction(function);
    }

    public String cancelProposal(byte[] proposalId, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_CANCELPROPOSAL, 
                Arrays.<Type>asList(new Bytes32(proposalId)),
                Collections.<TypeReference<?>>emptyList(), 4);
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForCancelProposal(byte[] proposalId) {
        final Function function = new Function(
                FUNC_CANCELPROPOSAL, 
                Arrays.<Type>asList(new Bytes32(proposalId)),
                Collections.<TypeReference<?>>emptyList(), 4);
        return createSignedTransaction(function);
    }

    public Tuple1<byte[]> getCancelProposalInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_CANCELPROPOSAL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<byte[]>(

                (byte[]) results.get(0).getValue()
                );
    }

    public TransactionReceipt changeMode(BigInteger newMode) {
        final Function function = new Function(
                FUNC_CHANGEMODE, 
                Arrays.<Type>asList(new Uint8(newMode)),
                Collections.<TypeReference<?>>emptyList(), 0);
        return executeTransaction(function);
    }

    public String changeMode(BigInteger newMode, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_CHANGEMODE, 
                Arrays.<Type>asList(new Uint8(newMode)),
                Collections.<TypeReference<?>>emptyList(), 0);
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForChangeMode(BigInteger newMode) {
        final Function function = new Function(
                FUNC_CHANGEMODE, 
                Arrays.<Type>asList(new Uint8(newMode)),
                Collections.<TypeReference<?>>emptyList(), 0);
        return createSignedTransaction(function);
    }

    public Tuple1<BigInteger> getChangeModeInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_CHANGEMODE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public TransactionReceipt createProduct(byte[] hash) {
        final Function function = new Function(
                FUNC_CREATEPRODUCT, 
                Arrays.<Type>asList(new Bytes32(hash)),
                Collections.<TypeReference<?>>emptyList(), 0);
        return executeTransaction(function);
    }

    public String createProduct(byte[] hash, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_CREATEPRODUCT, 
                Arrays.<Type>asList(new Bytes32(hash)),
                Collections.<TypeReference<?>>emptyList(), 0);
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForCreateProduct(byte[] hash) {
        final Function function = new Function(
                FUNC_CREATEPRODUCT, 
                Arrays.<Type>asList(new Bytes32(hash)),
                Collections.<TypeReference<?>>emptyList(), 0);
        return createSignedTransaction(function);
    }

    public Tuple1<byte[]> getCreateProductInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_CREATEPRODUCT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<byte[]>(

                (byte[]) results.get(0).getValue()
                );
    }

    public Tuple1<byte[]> getCreateProductOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_CREATEPRODUCT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicBytes>() {}));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<byte[]>(

                (byte[]) results.get(0).getValue()
                );
    }

    public TransactionReceipt createProposal(String to, BigInteger nonce, byte[] data) {
        final Function function = new Function(
                FUNC_CREATEPROPOSAL, 
                Arrays.<Type>asList(new Address(to),
                new Uint256(nonce),
                new DynamicBytes(data)),
                Collections.<TypeReference<?>>emptyList(), 0);
        return executeTransaction(function);
    }

    public String createProposal(String to, BigInteger nonce, byte[] data,
            TransactionCallback callback) {
        final Function function = new Function(
                FUNC_CREATEPROPOSAL, 
                Arrays.<Type>asList(new Address(to),
                new Uint256(nonce),
                new DynamicBytes(data)),
                Collections.<TypeReference<?>>emptyList(), 0);
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForCreateProposal(String to, BigInteger nonce, byte[] data) {
        final Function function = new Function(
                FUNC_CREATEPROPOSAL, 
                Arrays.<Type>asList(new Address(to),
                new Uint256(nonce),
                new DynamicBytes(data)),
                Collections.<TypeReference<?>>emptyList(), 0);
        return createSignedTransaction(function);
    }

    public Tuple3<String, BigInteger, byte[]> getCreateProposalInput(
            TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_CREATEPROPOSAL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<DynamicBytes>() {}));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, BigInteger, byte[]>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue(), 
                (byte[]) results.get(2).getValue()
                );
    }

    public Tuple1<byte[]> getCreateProposalOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_CREATEPROPOSAL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<byte[]>(

                (byte[]) results.get(0).getValue()
                );
    }

    public TransactionReceipt deleteProduct(byte[] productId) {
        final Function function = new Function(
                FUNC_DELETEPRODUCT, 
                Arrays.<Type>asList(new DynamicBytes(productId)),
                Collections.<TypeReference<?>>emptyList(), 0);
        return executeTransaction(function);
    }

    public String deleteProduct(byte[] productId, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_DELETEPRODUCT, 
                Arrays.<Type>asList(new DynamicBytes(productId)),
                Collections.<TypeReference<?>>emptyList(), 0);
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForDeleteProduct(byte[] productId) {
        final Function function = new Function(
                FUNC_DELETEPRODUCT, 
                Arrays.<Type>asList(new DynamicBytes(productId)),
                Collections.<TypeReference<?>>emptyList(), 0);
        return createSignedTransaction(function);
    }

    public Tuple1<byte[]> getDeleteProductInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_DELETEPRODUCT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicBytes>() {}));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<byte[]>(

                (byte[]) results.get(0).getValue()
                );
    }

    public BigInteger mode() throws ContractException {
        final Function function = new Function(FUNC_MODE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public TransactionReceipt modifyProduct(byte[] productId, byte[] hash) {
        final Function function = new Function(
                FUNC_MODIFYPRODUCT, 
                Arrays.<Type>asList(new DynamicBytes(productId),
                new Bytes32(hash)),
                Collections.<TypeReference<?>>emptyList(), 0);
        return executeTransaction(function);
    }

    public String modifyProduct(byte[] productId, byte[] hash, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_MODIFYPRODUCT, 
                Arrays.<Type>asList(new DynamicBytes(productId),
                new Bytes32(hash)),
                Collections.<TypeReference<?>>emptyList(), 0);
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForModifyProduct(byte[] productId, byte[] hash) {
        final Function function = new Function(
                FUNC_MODIFYPRODUCT, 
                Arrays.<Type>asList(new DynamicBytes(productId),
                new Bytes32(hash)),
                Collections.<TypeReference<?>>emptyList(), 0);
        return createSignedTransaction(function);
    }

    public Tuple2<byte[], byte[]> getModifyProductInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_MODIFYPRODUCT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicBytes>() {}, new TypeReference<Bytes32>() {}));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<byte[], byte[]>(

                (byte[]) results.get(0).getValue(), 
                (byte[]) results.get(1).getValue()
                );
    }

    public TransactionReceipt removeGovernor(String governor) {
        final Function function = new Function(
                FUNC_REMOVEGOVERNOR, 
                Arrays.<Type>asList(new Address(governor)),
                Collections.<TypeReference<?>>emptyList(), 0);
        return executeTransaction(function);
    }

    public String removeGovernor(String governor, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_REMOVEGOVERNOR, 
                Arrays.<Type>asList(new Address(governor)),
                Collections.<TypeReference<?>>emptyList(), 0);
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForRemoveGovernor(String governor) {
        final Function function = new Function(
                FUNC_REMOVEGOVERNOR, 
                Arrays.<Type>asList(new Address(governor)),
                Collections.<TypeReference<?>>emptyList(), 0);
        return createSignedTransaction(function);
    }

    public Tuple1<String> getRemoveGovernorInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_REMOVEGOVERNOR, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public TransactionReceipt vote(byte[] proposalId) {
        final Function function = new Function(
                FUNC_VOTE, 
                Arrays.<Type>asList(new Bytes32(proposalId)),
                Collections.<TypeReference<?>>emptyList(), 0);
        return executeTransaction(function);
    }

    public String vote(byte[] proposalId, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_VOTE, 
                Arrays.<Type>asList(new Bytes32(proposalId)),
                Collections.<TypeReference<?>>emptyList(), 0);
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForVote(byte[] proposalId) {
        final Function function = new Function(
                FUNC_VOTE, 
                Arrays.<Type>asList(new Bytes32(proposalId)),
                Collections.<TypeReference<?>>emptyList(), 0);
        return createSignedTransaction(function);
    }

    public Tuple1<byte[]> getVoteInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_VOTE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<byte[]>(

                (byte[]) results.get(0).getValue()
                );
    }

    public static ProductModule load(String contractAddress, Client client,
            CryptoKeyPair credential) {
        return new ProductModule(contractAddress, client, credential);
    }

    public static ProductModule deploy(Client client, CryptoKeyPair credential, String _governor,
            String accountContract) throws ContractException {
        byte[] encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new Address(_governor),
                new Address(accountContract)));
        return deploy(ProductModule.class, client, credential, getBinary(client.getCryptoSuite()), getABI(), encodedConstructor, null);
    }

    public static class CancelProposalEventResponse {
        public TransactionReceipt.Logs log;

        public byte[] proposalId;
    }

    public static class CreateProductEventResponse {
        public TransactionReceipt.Logs log;

        public byte[] productId;

        public byte[] hash;
    }

    public static class CreateProposalEventResponse {
        public TransactionReceipt.Logs log;

        public byte[] proposalId;
    }

    public static class DeleteProductEventResponse {
        public TransactionReceipt.Logs log;

        public byte[] productId;
    }

    public static class ExecuteProposalEventResponse {
        public TransactionReceipt.Logs log;

        public byte[] proposalId;

        public Boolean success;
    }

    public static class ModifyProductEventResponse {
        public TransactionReceipt.Logs log;

        public byte[] productId;

        public byte[] hash;
    }

    public static class ProductApprovedEventResponse {
        public TransactionReceipt.Logs log;

        public byte[] productId;
    }

    public static class ProductDeniedEventResponse {
        public TransactionReceipt.Logs log;

        public byte[] productId;
    }

    public static class VoteProposalEventResponse {
        public TransactionReceipt.Logs log;

        public byte[] proposalId;
    }
}
