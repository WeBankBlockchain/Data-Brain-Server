plugins {
	id 'java'
	id 'idea'
	id 'org.springframework.boot' version '2.2.8.RELEASE'
	id 'io.spring.dependency-management' version '1.0.15.RELEASE'
}

group = 'com.webank'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '8'

repositories {
	maven { url "http://maven.aliyun.com/nexus/content/groups/public/"}
	maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
	maven { url "https://dl.bintray.com/ethereum/maven/" }
	mavenLocal()
	mavenCentral()
}


def log4j_version="2.16.0"
List logger = [
		"org.apache.logging.log4j:log4j-api:$log4j_version",
		"org.apache.logging.log4j:log4j-to-slf4j:$log4j_version",
]

List swagger = [
		'io.springfox:springfox-boot-starter:3.0.0'
]
dependencies {
	implementation logger
	implementation 'org.springframework.boot:spring-boot-starter'
	implementation ("org.fisco-bcos.java-sdk:fisco-bcos-java-sdk:3.1.0") //java sdk
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter:2.2.2'
	implementation "org.apache.commons:commons-lang3:3.6"
	implementation "commons-io:commons-io:2.11.0"
	compileOnly 'org.projectlombok:lombok:1.18.10'
	annotationProcessor 'org.projectlombok:lombok:1.18.10'
	implementation 'cn.hutool:hutool-all:5.8.4'
	implementation("com.google.guava:guava:31.1-jre")
	implementation 'mysql:mysql-connector-java'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	implementation 'com.baomidou:mybatis-plus:3.3.2'
	implementation 'com.baomidou:mybatis-plus-generator:3.3.2'
	implementation 'org.apache.velocity:velocity:1.7'
	implementation group: 'io.swagger', name: 'swagger-annotations', version: '1.5.20'
	implementation 'io.springfox:springfox-swagger2:2.9.2'
	implementation 'io.springfox:springfox-swagger-ui:2.9.2'
}

tasks.named('test') {
	useJUnitPlatform()
}

bootJar {
	destinationDir file('dist')
	archiveName "databrain_" + version + '.jar'
	doLast {
		copy {
			from file('conf/')
			into 'dist/'
		}
		copy {
			from configurations.runtime
			into 'dist/lib'
		}
		copy {
			from file('src/main/resources/application.yml')
			into 'dist/config/'
		}
		copy {
			from file('src/main/resources/start.sh')
			into 'dist/'
		}
		copy {
			from file('src/main/resources/stop.sh')
			into 'dist/'
		}
	}
}

clean {
	println "delete ${projectDir}/dist"
	delete "${projectDir}/dist"
}
